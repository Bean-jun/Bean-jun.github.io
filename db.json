{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/20200513/Java版本截图.png","path":"img/20200513/Java版本截图.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/img/20200512/828879970.png","path":"img/20200512/828879970.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1590720836202},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1590720836202},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1590720836202},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1590720836218},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1590720836218},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1590720836249},{"_id":"source/_posts/Hexo配合GitHub搭建个人博客.md","hash":"fe9d5249053467e0456b32ff0a555392a35ee13a","modified":1590720836186},{"_id":"source/_posts/失声痛哭之常用Linux命令.md","hash":"adffd511546a2883e82a16c049902bf4f1400593","modified":1590720836202},{"_id":"source/_posts/迁移Hexo操作.md","hash":"7424436b8a7627ac3cba5a728827e7bc45817f6e","modified":1590722534987},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1590720836218},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1590720836218},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1590720836218},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1590720836218},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1590720836218},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1590720836218},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1590720836218},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1590720836218},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1590720836218},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1590720836218},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1590720836218},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1590720836218},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1590720836249},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1590720836249},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1590720836249},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1590720836249},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1590720836249},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1590720836249},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1590720836249},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1590720836265},{"_id":"source/_posts/Java/学习Java第一课.md","hash":"b06ba24e906cf684e214aa5039be0a9974d84d59","modified":1590720836186},{"_id":"source/_posts/Java/学习Java第三课.md","hash":"12975e619cc6848a4e30816372baeddc94ae90b8","modified":1590720836202},{"_id":"source/_posts/Java/学习Java第二课.md","hash":"9ada2ae9813da9e2b187fb0a267a7da7d3dbab62","modified":1590720836202},{"_id":"source/img/20200513/Java版本截图.png","hash":"10cb8073957efb0e1406dfe2277197ba2bcf3a88","modified":1590720836202},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1590720836218},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1590720836249},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1590720836249},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1590720836249},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1590720836249},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1590720836249},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1590720836249},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1590720836265},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1590720836265},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1590720836280},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590720836280},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590720836280},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1590720836311},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1590720836311},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1590720836311},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1590720836311},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1590720836233},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1590720836233},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1590720836265},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1590720836265},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1590720836265},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1590720836265},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1590720836280},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1590720836280},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1590720836280},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590720836296},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1590720836296},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1590720836280},{"_id":"source/img/20200512/828879970.png","hash":"ab0b75dccbdd817a11c1711ffa51376ade56bb7f","modified":1590720836202},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1590720836280},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1590720836280},{"_id":"public/2020/05/29/迁移Hexo操作/index.html","hash":"de27e53745b3b2120499066425f61e55a884d0bd","modified":1591513769701},{"_id":"public/2020/05/29/失声痛哭之常用Linux命令/index.html","hash":"2f87ceffb51e9f6b43610b4d7d19a3f224411f5d","modified":1591513769701},{"_id":"public/2020/05/29/Java/学习Java第三课/index.html","hash":"101127057455b4275bb2d006ac52c219e5da76cf","modified":1591513769701},{"_id":"public/2020/05/29/Hexo配合GitHub搭建个人博客/index.html","hash":"cf9948722ec5d0cb040ca6697432545162aea97e","modified":1591513769701},{"_id":"public/2020/05/29/Java/学习Java第一课/index.html","hash":"03252441faae70cc3ee250785b606c7384ad8aa9","modified":1591513769701},{"_id":"public/archives/index.html","hash":"add163c325607a0a8b7eeced3df46f8d0d614a91","modified":1591513769701},{"_id":"public/archives/2020/index.html","hash":"93bb2d02018010546daca67c7102a023878dc4ec","modified":1591513769701},{"_id":"public/archives/2020/05/index.html","hash":"6fbe7bfde5eba099c8181beefac8939d9fcecaae","modified":1591513769701},{"_id":"public/2020/05/29/Java/学习Java第二课/index.html","hash":"a74795cb777b82f7b085cd5f3c2a37bbcec3cca7","modified":1591513769701},{"_id":"public/index.html","hash":"2e2f4f184305533fc4e80d5e7a8b0ce8f94b4f90","modified":1591513769701},{"_id":"public/img/20200513/Java版本截图.png","hash":"10cb8073957efb0e1406dfe2277197ba2bcf3a88","modified":1590722554961},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590722554961},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590722554961},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590722554961},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590722554961},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590722554961},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590722554961},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1590722554961},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1590722554961},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1590722554961},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590722554961},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1590722554961},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1590722554961},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1590722554961},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1590722554961},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590722554961},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1590722554961},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590722554961},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1590722554961},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1590722554961},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1590722554961},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1590722554961},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1590722554961},{"_id":"public/img/20200512/828879970.png","hash":"ab0b75dccbdd817a11c1711ffa51376ade56bb7f","modified":1590722554961},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1590722554961},{"_id":"source/_posts/使用高德地图API创建一个属于自己的天气闹钟.md","hash":"b75d1da5bec035f1d3c24555c9ce4368f94f5e3f","modified":1590849871722},{"_id":"public/2020/05/30/使用高德地图API创建一个属于自己的天气闹钟/index.html","hash":"b02dfe572437d41337a4ce8ced5b878b61019a3c","modified":1591513769701},{"_id":"source/_posts/Python连接C实现高效编程demo-md.md","hash":"ed5477f9f079937586183929feea42cd07387be8","modified":1590886452233},{"_id":"public/2020/05/31/Python连接C实现高效编程demo-md/index.html","hash":"de6dda94c652234e62aaebe42ee541ebbc1a56b4","modified":1590886485244},{"_id":"source/_posts/Python连接C实现高效编程demo.md","hash":"d4cbc78eb9240325895957b81bc9d286b9e29af2","modified":1590888124261},{"_id":"public/2020/05/31/Python连接C实现高效编程demo/index.html","hash":"e6a134be58673ced68c48ef82faa09c977c42928","modified":1591513769701},{"_id":"source/_posts/闭包的简要介绍.md","hash":"c917ce736e1bb39f9e353f24866cef747e70b088","modified":1590989819960},{"_id":"public/2020/06/01/闭包的简要介绍/index.html","hash":"8cb2067197da5ca96f413ef60f37e2692d822ed2","modified":1590989824571},{"_id":"public/archives/2020/06/index.html","hash":"735d556908d3019ab7a270d86383ab07d7f8f7db","modified":1591513769701},{"_id":"source/_posts/Python装饰器的简单理解.md","hash":"19f4f53bece18ddeb40833f562b15d47826372e2","modified":1590997732492},{"_id":"source/_posts/Python闭包的简要介绍.md","hash":"c917ce736e1bb39f9e353f24866cef747e70b088","modified":1590997593260},{"_id":"public/2020/06/01/Python装饰器的简单理解/index.html","hash":"6faa51e6006b69c186827a9e123daeca48c47b02","modified":1591513769701},{"_id":"public/2020/06/01/Python闭包的简要介绍/index.html","hash":"b004637faebfe90191ce45c8ec792499b5645827","modified":1591513769701},{"_id":"source/_posts/Python迭代器及生成器的简单理解.md","hash":"8fc4e9584b9e48eb9593b1c8935336ad448d8d0b","modified":1591058344051},{"_id":"public/2020/06/02/Python迭代器及生成器的简单理解/index.html","hash":"0fdd032b2fb97eaa3ec1f96354b04c944d08993d","modified":1591513769701},{"_id":"public/page/2/index.html","hash":"7998b0b47dbe90aabb974cc88cbe1f73807e3f5a","modified":1591513769701},{"_id":"public/archives/page/2/index.html","hash":"ac9720ebe7998f31b7a211d01be9564d9c70a257","modified":1591513769701},{"_id":"public/archives/2020/page/2/index.html","hash":"b99a2dd383ac07bc09c9ff1dc7d246c943cfd6bd","modified":1591513769701},{"_id":"source/_posts/Python第三方库numpy的简单入门使用.md","hash":"d03614e92312b997f833ccd561d9046aa3c72fd5","modified":1591513755434},{"_id":"public/2020/06/07/Python第三方库numpy的简单入门使用/index.html","hash":"e45ba04127348b88741424af5d3806c773cddd12","modified":1591513769701}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"事情的经过是这样的，为了写学校的下发的模板文件不会乱码，我在Linux下创建了一个Windows7的虚拟机，使用共享文档的方式在win系统下编辑我放在Ubuntu中的文件（ps：还好是这么做的，不然小命没了），可是我昨天再开机的时候，emmm，我的天，我的Ubuntu20.04进不去图形化界面了，emmm，那我虚拟机啥的都没法子用了啊，我的文件有一天的还没同步啊。哎，喂，这么可以这样.......   \n其实我在使用Ubuntu20.04的时候发现这个系统的图形化界面的操作是多么的不友好，虽然图形化界面相对18.04好看了太多，但是bug也太多了吧.....，软件开几个后就会出现死机的现象，按什么都没有反应，包括使用Ctrl+Alt+F3来使用命令行模式都不可以，只能重启电脑...我....还有这输入法，我用的难受，终于再使用大半个月后系统的图形化界面崩了，进不去了....（ps:还好终端的模式可以进去....）   \n下面就来讲解我怎么把数据备份出来的，以便大家参考   \n1.  确认需要备份的文件及大小（这里有一个坑，后面会有提）\n    - 在/home目录下，使用`df  -sh [用户名]`就可以查看这个用户目录下占用多大空间，我是52G.....我U盘才8G，这...\n    - 可能是我没有安装对应的支持，导致我在终端模式下，/home/bean/下的文件夹，中文都是乱码.....，我真的是无语，都不知道这么移动了，毕竟我U盘容量小了，不然就可以直接`sudo cp -rf * /U盘目录`，哎...\n2. 准备一个大U盘，用来备份（越大越好）\n3. 挂载U盘，移动文件（还没结束哦！）\n    - 使用`fdisk -l `查看U盘的盘符，使用`sudo mount /dev/u盘盘符  /mnt`就可以使用挂载命令将U盘挂载到`/mnt`目录下，直接使用`sudo cp -rf * /mnt`就可以了哦，小容量的自己想办法删些文件,没有乱码的可以在终端中删除，比如在Ubuntu的安装盘中使用试用安装模式来删除一些文件（我就是这样做的...）\n    - 卸载U盘`sudo umount /mnt`你以为这样就好了么，呵呵呵，后面还有呢\n\n当我安装好18.04后（图形化界面确实比20.04强多了），我打开一看....都是`x`，没权限打开....，使用`ls -al或者ll`一看，用户为root，用户组为root....我们这个使用就要更改用户和用户组，命令分别是`chown`和`chgrp`,不过可以使用`chown`一个命令解决倒是，这里我将用户改为`bean`用户组改为`bean`，使用命令为`sudo chown -R bean:bean *`，这里的R表示同时改动当前文件夹下的子文件夹和文件，不然就得一个文件夹一个一个的改.....     \n我真的怕了，哎，哦对了，这篇文章就是使用我讲解hexo博客备份的方式来重新配置环境后再发出来的哦。\n","source":"_posts/失声痛哭之常用Linux命令.md","raw":"事情的经过是这样的，为了写学校的下发的模板文件不会乱码，我在Linux下创建了一个Windows7的虚拟机，使用共享文档的方式在win系统下编辑我放在Ubuntu中的文件（ps：还好是这么做的，不然小命没了），可是我昨天再开机的时候，emmm，我的天，我的Ubuntu20.04进不去图形化界面了，emmm，那我虚拟机啥的都没法子用了啊，我的文件有一天的还没同步啊。哎，喂，这么可以这样.......   \n其实我在使用Ubuntu20.04的时候发现这个系统的图形化界面的操作是多么的不友好，虽然图形化界面相对18.04好看了太多，但是bug也太多了吧.....，软件开几个后就会出现死机的现象，按什么都没有反应，包括使用Ctrl+Alt+F3来使用命令行模式都不可以，只能重启电脑...我....还有这输入法，我用的难受，终于再使用大半个月后系统的图形化界面崩了，进不去了....（ps:还好终端的模式可以进去....）   \n下面就来讲解我怎么把数据备份出来的，以便大家参考   \n1.  确认需要备份的文件及大小（这里有一个坑，后面会有提）\n    - 在/home目录下，使用`df  -sh [用户名]`就可以查看这个用户目录下占用多大空间，我是52G.....我U盘才8G，这...\n    - 可能是我没有安装对应的支持，导致我在终端模式下，/home/bean/下的文件夹，中文都是乱码.....，我真的是无语，都不知道这么移动了，毕竟我U盘容量小了，不然就可以直接`sudo cp -rf * /U盘目录`，哎...\n2. 准备一个大U盘，用来备份（越大越好）\n3. 挂载U盘，移动文件（还没结束哦！）\n    - 使用`fdisk -l `查看U盘的盘符，使用`sudo mount /dev/u盘盘符  /mnt`就可以使用挂载命令将U盘挂载到`/mnt`目录下，直接使用`sudo cp -rf * /mnt`就可以了哦，小容量的自己想办法删些文件,没有乱码的可以在终端中删除，比如在Ubuntu的安装盘中使用试用安装模式来删除一些文件（我就是这样做的...）\n    - 卸载U盘`sudo umount /mnt`你以为这样就好了么，呵呵呵，后面还有呢\n\n当我安装好18.04后（图形化界面确实比20.04强多了），我打开一看....都是`x`，没权限打开....，使用`ls -al或者ll`一看，用户为root，用户组为root....我们这个使用就要更改用户和用户组，命令分别是`chown`和`chgrp`,不过可以使用`chown`一个命令解决倒是，这里我将用户改为`bean`用户组改为`bean`，使用命令为`sudo chown -R bean:bean *`，这里的R表示同时改动当前文件夹下的子文件夹和文件，不然就得一个文件夹一个一个的改.....     \n我真的怕了，哎，哦对了，这篇文章就是使用我讲解hexo博客备份的方式来重新配置环境后再发出来的哦。\n","slug":"失声痛哭之常用Linux命令","published":1,"date":"2020-05-29T02:53:56.202Z","updated":"2020-05-29T02:53:56.202Z","title":"失声痛哭之常用Linux命令","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zqs00003cbi1ypzgjle","content":"<p>事情的经过是这样的，为了写学校的下发的模板文件不会乱码，我在Linux下创建了一个Windows7的虚拟机，使用共享文档的方式在win系统下编辑我放在Ubuntu中的文件（ps：还好是这么做的，不然小命没了），可是我昨天再开机的时候，emmm，我的天，我的Ubuntu20.04进不去图形化界面了，emmm，那我虚拟机啥的都没法子用了啊，我的文件有一天的还没同步啊。哎，喂，这么可以这样…….<br>其实我在使用Ubuntu20.04的时候发现这个系统的图形化界面的操作是多么的不友好，虽然图形化界面相对18.04好看了太多，但是bug也太多了吧…..，软件开几个后就会出现死机的现象，按什么都没有反应，包括使用Ctrl+Alt+F3来使用命令行模式都不可以，只能重启电脑…我….还有这输入法，我用的难受，终于再使用大半个月后系统的图形化界面崩了，进不去了….（ps:还好终端的模式可以进去….）<br>下面就来讲解我怎么把数据备份出来的，以便大家参考   </p>\n<ol>\n<li>确认需要备份的文件及大小（这里有一个坑，后面会有提）<ul>\n<li>在/home目录下，使用<code>df  -sh [用户名]</code>就可以查看这个用户目录下占用多大空间，我是52G…..我U盘才8G，这…</li>\n<li>可能是我没有安装对应的支持，导致我在终端模式下，/home/bean/下的文件夹，中文都是乱码…..，我真的是无语，都不知道这么移动了，毕竟我U盘容量小了，不然就可以直接<code>sudo cp -rf * /U盘目录</code>，哎…</li>\n</ul>\n</li>\n<li>准备一个大U盘，用来备份（越大越好）</li>\n<li>挂载U盘，移动文件（还没结束哦！）<ul>\n<li>使用<code>fdisk -l</code>查看U盘的盘符，使用<code>sudo mount /dev/u盘盘符  /mnt</code>就可以使用挂载命令将U盘挂载到<code>/mnt</code>目录下，直接使用<code>sudo cp -rf * /mnt</code>就可以了哦，小容量的自己想办法删些文件,没有乱码的可以在终端中删除，比如在Ubuntu的安装盘中使用试用安装模式来删除一些文件（我就是这样做的…）</li>\n<li>卸载U盘<code>sudo umount /mnt</code>你以为这样就好了么，呵呵呵，后面还有呢</li>\n</ul>\n</li>\n</ol>\n<p>当我安装好18.04后（图形化界面确实比20.04强多了），我打开一看….都是<code>x</code>，没权限打开….，使用<code>ls -al或者ll</code>一看，用户为root，用户组为root….我们这个使用就要更改用户和用户组，命令分别是<code>chown</code>和<code>chgrp</code>,不过可以使用<code>chown</code>一个命令解决倒是，这里我将用户改为<code>bean</code>用户组改为<code>bean</code>，使用命令为<code>sudo chown -R bean:bean *</code>，这里的R表示同时改动当前文件夹下的子文件夹和文件，不然就得一个文件夹一个一个的改…..<br>我真的怕了，哎，哦对了，这篇文章就是使用我讲解hexo博客备份的方式来重新配置环境后再发出来的哦。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>事情的经过是这样的，为了写学校的下发的模板文件不会乱码，我在Linux下创建了一个Windows7的虚拟机，使用共享文档的方式在win系统下编辑我放在Ubuntu中的文件（ps：还好是这么做的，不然小命没了），可是我昨天再开机的时候，emmm，我的天，我的Ubuntu20.04进不去图形化界面了，emmm，那我虚拟机啥的都没法子用了啊，我的文件有一天的还没同步啊。哎，喂，这么可以这样…….<br>其实我在使用Ubuntu20.04的时候发现这个系统的图形化界面的操作是多么的不友好，虽然图形化界面相对18.04好看了太多，但是bug也太多了吧…..，软件开几个后就会出现死机的现象，按什么都没有反应，包括使用Ctrl+Alt+F3来使用命令行模式都不可以，只能重启电脑…我….还有这输入法，我用的难受，终于再使用大半个月后系统的图形化界面崩了，进不去了….（ps:还好终端的模式可以进去….）<br>下面就来讲解我怎么把数据备份出来的，以便大家参考   </p>\n<ol>\n<li>确认需要备份的文件及大小（这里有一个坑，后面会有提）<ul>\n<li>在/home目录下，使用<code>df  -sh [用户名]</code>就可以查看这个用户目录下占用多大空间，我是52G…..我U盘才8G，这…</li>\n<li>可能是我没有安装对应的支持，导致我在终端模式下，/home/bean/下的文件夹，中文都是乱码…..，我真的是无语，都不知道这么移动了，毕竟我U盘容量小了，不然就可以直接<code>sudo cp -rf * /U盘目录</code>，哎…</li>\n</ul>\n</li>\n<li>准备一个大U盘，用来备份（越大越好）</li>\n<li>挂载U盘，移动文件（还没结束哦！）<ul>\n<li>使用<code>fdisk -l</code>查看U盘的盘符，使用<code>sudo mount /dev/u盘盘符  /mnt</code>就可以使用挂载命令将U盘挂载到<code>/mnt</code>目录下，直接使用<code>sudo cp -rf * /mnt</code>就可以了哦，小容量的自己想办法删些文件,没有乱码的可以在终端中删除，比如在Ubuntu的安装盘中使用试用安装模式来删除一些文件（我就是这样做的…）</li>\n<li>卸载U盘<code>sudo umount /mnt</code>你以为这样就好了么，呵呵呵，后面还有呢</li>\n</ul>\n</li>\n</ol>\n<p>当我安装好18.04后（图形化界面确实比20.04强多了），我打开一看….都是<code>x</code>，没权限打开….，使用<code>ls -al或者ll</code>一看，用户为root，用户组为root….我们这个使用就要更改用户和用户组，命令分别是<code>chown</code>和<code>chgrp</code>,不过可以使用<code>chown</code>一个命令解决倒是，这里我将用户改为<code>bean</code>用户组改为<code>bean</code>，使用命令为<code>sudo chown -R bean:bean *</code>，这里的R表示同时改动当前文件夹下的子文件夹和文件，不然就得一个文件夹一个一个的改…..<br>我真的怕了，哎，哦对了，这篇文章就是使用我讲解hexo博客备份的方式来重新配置环境后再发出来的哦。</p>\n"},{"_content":"### Hexo配合GitHub搭建个人博客\n\n1. 安装各类软件\n    - Git\n        - emmmm  这个自己去百度去\n    - Node.js\n        - 这个也百度去\n    - Hexo\n        - `sudo npm install hexo-cli -g`\n\n2. 初始化   \n    - 找个自己喜欢的目录，创建一个喜欢的目录名\n        - eg: `mkdir Blog`\n    - 进入目录并初始化\n        - `cd Blog`\n        - `hexo init`\n        - `npm install`\n\n3. 运行\n    - `hexo server`\n\n4. 进行部署\n    - 进入GitHub创建一个公共仓库，取名为`<GitHub账户名>.github.io`\n    - 打开`Blog`目录下的`_config.yml`，修改一下最后几行\n    - eg：   \n        ```\n        deploy:\n        type: git\n        repo: 自己的仓库地址\n        branch: master\n        ```\n5. 创建文章\n    - 在`Blog/source/_posts/`目录下开始写吧\n    - 想要插入图片？ 没问题\n        - 当前目录下创建一个文件夹，放置图片，他不香吗？\n        - eg:   \n            ```\n            .\n            ├── img\n            │   └── 20200512\n            │       └── 828879970.png\n            └── _posts\n                └── Hexo配合GitHub搭建个人博客.md\n            ```\n    - 图片演示   \n        ![alt](../img/20200512/828879970.png)\n    \n6. 上传\n    - `hexo clean`\n    - `hexo generate` 或者 `hexo g`\n    - `hexo deploy` 或者 `hexo d`\n\n7. 关于换主题，emmm，我觉得自带的很好看哇，就不换了。","source":"_posts/Hexo配合GitHub搭建个人博客.md","raw":"### Hexo配合GitHub搭建个人博客\n\n1. 安装各类软件\n    - Git\n        - emmmm  这个自己去百度去\n    - Node.js\n        - 这个也百度去\n    - Hexo\n        - `sudo npm install hexo-cli -g`\n\n2. 初始化   \n    - 找个自己喜欢的目录，创建一个喜欢的目录名\n        - eg: `mkdir Blog`\n    - 进入目录并初始化\n        - `cd Blog`\n        - `hexo init`\n        - `npm install`\n\n3. 运行\n    - `hexo server`\n\n4. 进行部署\n    - 进入GitHub创建一个公共仓库，取名为`<GitHub账户名>.github.io`\n    - 打开`Blog`目录下的`_config.yml`，修改一下最后几行\n    - eg：   \n        ```\n        deploy:\n        type: git\n        repo: 自己的仓库地址\n        branch: master\n        ```\n5. 创建文章\n    - 在`Blog/source/_posts/`目录下开始写吧\n    - 想要插入图片？ 没问题\n        - 当前目录下创建一个文件夹，放置图片，他不香吗？\n        - eg:   \n            ```\n            .\n            ├── img\n            │   └── 20200512\n            │       └── 828879970.png\n            └── _posts\n                └── Hexo配合GitHub搭建个人博客.md\n            ```\n    - 图片演示   \n        ![alt](../img/20200512/828879970.png)\n    \n6. 上传\n    - `hexo clean`\n    - `hexo generate` 或者 `hexo g`\n    - `hexo deploy` 或者 `hexo d`\n\n7. 关于换主题，emmm，我觉得自带的很好看哇，就不换了。","slug":"Hexo配合GitHub搭建个人博客","published":1,"date":"2020-05-29T02:53:56.186Z","updated":"2020-05-29T02:53:56.186Z","title":"Hexo配合GitHub搭建个人博客","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zr300013cbie31tdv6y","content":"<h3 id=\"Hexo配合GitHub搭建个人博客\"><a href=\"#Hexo配合GitHub搭建个人博客\" class=\"headerlink\" title=\"Hexo配合GitHub搭建个人博客\"></a>Hexo配合GitHub搭建个人博客</h3><ol>\n<li><p>安装各类软件</p>\n<ul>\n<li>Git<ul>\n<li>emmmm  这个自己去百度去</li>\n</ul>\n</li>\n<li>Node.js<ul>\n<li>这个也百度去</li>\n</ul>\n</li>\n<li>Hexo<ul>\n<li><code>sudo npm install hexo-cli -g</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>初始化   </p>\n<ul>\n<li>找个自己喜欢的目录，创建一个喜欢的目录名<ul>\n<li>eg: <code>mkdir Blog</code></li>\n</ul>\n</li>\n<li>进入目录并初始化<ul>\n<li><code>cd Blog</code></li>\n<li><code>hexo init</code></li>\n<li><code>npm install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行</p>\n<ul>\n<li><code>hexo server</code></li>\n</ul>\n</li>\n<li><p>进行部署</p>\n<ul>\n<li>进入GitHub创建一个公共仓库，取名为<code>&lt;GitHub账户名&gt;.github.io</code></li>\n<li>打开<code>Blog</code>目录下的<code>_config.yml</code>，修改一下最后几行</li>\n<li>eg：     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: 自己的仓库地址</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>创建文章</p>\n<ul>\n<li>在<code>Blog/source/_posts/</code>目录下开始写吧</li>\n<li>想要插入图片？ 没问题<ul>\n<li>当前目录下创建一个文件夹，放置图片，他不香吗？</li>\n<li>eg:     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── img</span><br><span class=\"line\">│   └── 20200512</span><br><span class=\"line\">│       └── 828879970.png</span><br><span class=\"line\">└── _posts</span><br><span class=\"line\">    └── Hexo配合GitHub搭建个人博客.md</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>图片演示<br>  <img src=\"../img/20200512/828879970.png\" alt=\"alt\"></li>\n</ul>\n</li>\n<li><p>上传</p>\n<ul>\n<li><code>hexo clean</code></li>\n<li><code>hexo generate</code> 或者 <code>hexo g</code></li>\n<li><code>hexo deploy</code> 或者 <code>hexo d</code></li>\n</ul>\n</li>\n<li><p>关于换主题，emmm，我觉得自带的很好看哇，就不换了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hexo配合GitHub搭建个人博客\"><a href=\"#Hexo配合GitHub搭建个人博客\" class=\"headerlink\" title=\"Hexo配合GitHub搭建个人博客\"></a>Hexo配合GitHub搭建个人博客</h3><ol>\n<li><p>安装各类软件</p>\n<ul>\n<li>Git<ul>\n<li>emmmm  这个自己去百度去</li>\n</ul>\n</li>\n<li>Node.js<ul>\n<li>这个也百度去</li>\n</ul>\n</li>\n<li>Hexo<ul>\n<li><code>sudo npm install hexo-cli -g</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>初始化   </p>\n<ul>\n<li>找个自己喜欢的目录，创建一个喜欢的目录名<ul>\n<li>eg: <code>mkdir Blog</code></li>\n</ul>\n</li>\n<li>进入目录并初始化<ul>\n<li><code>cd Blog</code></li>\n<li><code>hexo init</code></li>\n<li><code>npm install</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行</p>\n<ul>\n<li><code>hexo server</code></li>\n</ul>\n</li>\n<li><p>进行部署</p>\n<ul>\n<li>进入GitHub创建一个公共仓库，取名为<code>&lt;GitHub账户名&gt;.github.io</code></li>\n<li>打开<code>Blog</code>目录下的<code>_config.yml</code>，修改一下最后几行</li>\n<li>eg：     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">type: git</span><br><span class=\"line\">repo: 自己的仓库地址</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>创建文章</p>\n<ul>\n<li>在<code>Blog/source/_posts/</code>目录下开始写吧</li>\n<li>想要插入图片？ 没问题<ul>\n<li>当前目录下创建一个文件夹，放置图片，他不香吗？</li>\n<li>eg:     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── img</span><br><span class=\"line\">│   └── 20200512</span><br><span class=\"line\">│       └── 828879970.png</span><br><span class=\"line\">└── _posts</span><br><span class=\"line\">    └── Hexo配合GitHub搭建个人博客.md</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>图片演示<br>  <img src=\"../img/20200512/828879970.png\" alt=\"alt\"></li>\n</ul>\n</li>\n<li><p>上传</p>\n<ul>\n<li><code>hexo clean</code></li>\n<li><code>hexo generate</code> 或者 <code>hexo g</code></li>\n<li><code>hexo deploy</code> 或者 <code>hexo d</code></li>\n</ul>\n</li>\n<li><p>关于换主题，emmm，我觉得自带的很好看哇，就不换了。</p>\n</li>\n</ol>\n"},{"_content":"有时候我们可能要在另一台电脑上使用我们的博客平台，这时，需要我们重新再操作一个远程仓库，然后在创建文章吗？？？   \n很明显，这是不现实的，我们有什么办法解决这个问题呢？，有的，我们可以做一个远程仓库备份就可以了，这样我们下次使用只要配置好环境，直接clone下来就可以使用了，来，先看步骤！\n\n1. 在GitHub上创建远程分支（都是点点点的操作）\n\n2. 配置环境\n    - Git\n    - Node.js\n    - Hexo\n        - `sudo npm install hexo-cli -g`\n\n3. `clone`仓库（这里有好几步）\n    - 克隆下来后，再创建一下分支`git checkout -b dev`,\n    - 删除掉`.git`以外的文件，务必要这样做。注意：不是删除掉`.git`。\n    - 然后将`Blog`文件夹下的所有文件移到这个目录，并使用`git`操作一下，操作如下：\n        ```\n        git add .\n        git commit -m ''\n        git push --set-upstream origin dev\n        ```\n    - 完成到这里就结束了这些部分的操作\n    - 然后这样一下`npm install` （可能不需要）\n\n3. 开始正常写文章\n    - 重复{Hexo配合GitHub搭建个人博客}里面的5～6步骤就可以了。\n\n4. 最后一步\n    - 写完之后，得同步到dev分支一下奥\n        ```\n        git add .\n        git commit -m ''\n        git push origin dev\n        ```","source":"_posts/迁移Hexo操作.md","raw":"有时候我们可能要在另一台电脑上使用我们的博客平台，这时，需要我们重新再操作一个远程仓库，然后在创建文章吗？？？   \n很明显，这是不现实的，我们有什么办法解决这个问题呢？，有的，我们可以做一个远程仓库备份就可以了，这样我们下次使用只要配置好环境，直接clone下来就可以使用了，来，先看步骤！\n\n1. 在GitHub上创建远程分支（都是点点点的操作）\n\n2. 配置环境\n    - Git\n    - Node.js\n    - Hexo\n        - `sudo npm install hexo-cli -g`\n\n3. `clone`仓库（这里有好几步）\n    - 克隆下来后，再创建一下分支`git checkout -b dev`,\n    - 删除掉`.git`以外的文件，务必要这样做。注意：不是删除掉`.git`。\n    - 然后将`Blog`文件夹下的所有文件移到这个目录，并使用`git`操作一下，操作如下：\n        ```\n        git add .\n        git commit -m ''\n        git push --set-upstream origin dev\n        ```\n    - 完成到这里就结束了这些部分的操作\n    - 然后这样一下`npm install` （可能不需要）\n\n3. 开始正常写文章\n    - 重复{Hexo配合GitHub搭建个人博客}里面的5～6步骤就可以了。\n\n4. 最后一步\n    - 写完之后，得同步到dev分支一下奥\n        ```\n        git add .\n        git commit -m ''\n        git push origin dev\n        ```","slug":"迁移Hexo操作","published":1,"date":"2020-05-29T03:22:14.987Z","updated":"2020-05-29T03:22:14.987Z","title":"迁移Hexo操作","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zr600023cbi2cz81qpo","content":"<p>有时候我们可能要在另一台电脑上使用我们的博客平台，这时，需要我们重新再操作一个远程仓库，然后在创建文章吗？？？<br>很明显，这是不现实的，我们有什么办法解决这个问题呢？，有的，我们可以做一个远程仓库备份就可以了，这样我们下次使用只要配置好环境，直接clone下来就可以使用了，来，先看步骤！</p>\n<ol>\n<li><p>在GitHub上创建远程分支（都是点点点的操作）</p>\n</li>\n<li><p>配置环境</p>\n<ul>\n<li>Git</li>\n<li>Node.js</li>\n<li>Hexo<ul>\n<li><code>sudo npm install hexo-cli -g</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>clone</code>仓库（这里有好几步）</p>\n<ul>\n<li>克隆下来后，再创建一下分支<code>git checkout -b dev</code>,</li>\n<li>删除掉<code>.git</code>以外的文件，务必要这样做。注意：不是删除掉<code>.git</code>。</li>\n<li>然后将<code>Blog</code>文件夹下的所有文件移到这个目录，并使用<code>git</code>操作一下，操作如下：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#39;&#39;</span><br><span class=\"line\">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure></li>\n<li>完成到这里就结束了这些部分的操作</li>\n<li>然后这样一下<code>npm install</code> （可能不需要）</li>\n</ul>\n</li>\n<li><p>开始正常写文章</p>\n<ul>\n<li>重复{Hexo配合GitHub搭建个人博客}里面的5～6步骤就可以了。</li>\n</ul>\n</li>\n<li><p>最后一步</p>\n<ul>\n<li>写完之后，得同步到dev分支一下奥  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#39;&#39;</span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们可能要在另一台电脑上使用我们的博客平台，这时，需要我们重新再操作一个远程仓库，然后在创建文章吗？？？<br>很明显，这是不现实的，我们有什么办法解决这个问题呢？，有的，我们可以做一个远程仓库备份就可以了，这样我们下次使用只要配置好环境，直接clone下来就可以使用了，来，先看步骤！</p>\n<ol>\n<li><p>在GitHub上创建远程分支（都是点点点的操作）</p>\n</li>\n<li><p>配置环境</p>\n<ul>\n<li>Git</li>\n<li>Node.js</li>\n<li>Hexo<ul>\n<li><code>sudo npm install hexo-cli -g</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>clone</code>仓库（这里有好几步）</p>\n<ul>\n<li>克隆下来后，再创建一下分支<code>git checkout -b dev</code>,</li>\n<li>删除掉<code>.git</code>以外的文件，务必要这样做。注意：不是删除掉<code>.git</code>。</li>\n<li>然后将<code>Blog</code>文件夹下的所有文件移到这个目录，并使用<code>git</code>操作一下，操作如下：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#39;&#39;</span><br><span class=\"line\">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure></li>\n<li>完成到这里就结束了这些部分的操作</li>\n<li>然后这样一下<code>npm install</code> （可能不需要）</li>\n</ul>\n</li>\n<li><p>开始正常写文章</p>\n<ul>\n<li>重复{Hexo配合GitHub搭建个人博客}里面的5～6步骤就可以了。</li>\n</ul>\n</li>\n<li><p>最后一步</p>\n<ul>\n<li>写完之后，得同步到dev分支一下奥  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &#39;&#39;</span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n"},{"_content":"## 一、 前言   \n再重新过一遍Java，毕竟这门语言还是用的蛮多的额，虽然...虽然Python很棒，我就是要学，我还要两个混起来搞（ps：不怕出事的小菜鸡）\n\n## 二、准备\n&emsp;&emsp;开始搞事情了啊，略略略~~~\n\n1. 安装JDK,配置环境（不会百度吧，这都啥年代了，没通网啊还是咋地）  \n    - 安装好了长这样   \n    ![alt](../../img/20200513/Java版本截图.png)\n\n2. 写个HelloWord.java文件\n    ```\n    // 务必注意，Python可以不写\";\",但是Java不可以哦\n    public class HelloWord{\n        public static void main(String[] args){\n            System.out.println(\"Python最棒！！\");\n        }\n    }\n    ```\n3. 编译HelloWord.Java文件并运行\n    - 使用javac HelloWord.java文件\n    - 使用java HelloWord运行\n\n## 三、正文\n&emsp;&emsp;没骗你，前面就是准备哦，后面才刚刚开始呢！\n1. 标识符（老生常谈了好吧）\n    - 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n    - 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n    - 关键字不能用作标识符\n    - 标识符是大小写敏感的\n2. 关键字（网上copy的，不要介意哦）\n<table class=\"reference\">\n<tbody><tr>\n<th>类别</th>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">访问控制</td>\n<td>private</td>\n<td>私有的</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>受保护的</td>\n</tr>\n<tr>\n<td>public</td>\n<td>公共的</td>\n</tr>\n<tr>\n<td>default </td>\n<td>默认</td>\n</tr>\n<tr>\n<td rowspan=\"13\" align=\"center\">类、方法和变量修饰符</td>\n<td>abstract</td>\n<td>声明抽象</td>\n</tr>\n<tr>\n<td>class</td>\n<td>类</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>扩充,继承</td>\n</tr>\n<tr>\n<td>final</td>\n<td>最终值,不可改变的</td>\n</tr>\n<tr>\n<td>implements</td>\n<td>实现（接口）</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>native</td>\n<td>本地，原生方法（非 Java 实现）</td>\n</tr>\n<tr>\n<td>new</td>\n<td>新,创建</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td>严格,精准</td>\n</tr>\n<tr>\n<td>synchronized</td>\n<td>线程,同步</td>\n</tr>\n<tr>\n<td>transient</td>\n<td>短暂</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>易失</td>\n</tr>\n<tr>\n<td rowspan=\"12\" align=\"center\">程序控制语句</td>\n<td>break</td>\n<td>跳出循环</td>\n</tr>\n<tr>\n<td>case</td>\n<td>定义一个值以供 switch 选择</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>继续</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>do</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>else</td>\n<td>否则</td>\n</tr>\n<tr>\n<td>for</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>实例</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>根据值选择执行</td>\n</tr>\n<tr>\n<td>while</td>\n<td>循环</td>\n</tr>\n<tr>\n<td rowspan=\"6\" align=\"center\">错误处理</td>\n<td>assert</td>\n<td>断言表达式是否为真</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>捕捉异常</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>有没有异常都执行</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出一个异常对象</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>声明一个异常可能被抛出</td>\n</tr>\n<tr>\n<td>try</td>\n<td>捕获异常</td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">包相关</td>\n<td>import</td>\n<td>引入</td>\n</tr>\n<tr>\n<td>package</td>\n<td>包</td>\n</tr>\n<tr>\n<td rowspan=\"8\" align=\"center\">基本类型</td>\n<td>boolean</td>\n<td>布尔型</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>字节型</td>\n</tr>\n<tr>\n<td>char</td>\n<td>字符型</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">变量引用</td>\n<td>super</td>\n<td>父类,超类</td>\n</tr>\n<tr>\n<td>this</td>\n<td>本类</td>\n</tr>\n<tr>\n<td>void</td>\n<td>无返回值</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">保留关键字</td>\n<td>goto</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>const</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>null</td>\n<td>空</td>\n</tr>\n</tbody></table>  \n\n## 四、结尾\n&emsp;&emsp;关键字很多，不用全记住，后面慢慢就记住了，首先搞好前面的环境搭建和HelloWord吧！关于后面内容将在第二课介绍！（ps:今天太困了）","source":"_posts/Java/学习Java第一课.md","raw":"## 一、 前言   \n再重新过一遍Java，毕竟这门语言还是用的蛮多的额，虽然...虽然Python很棒，我就是要学，我还要两个混起来搞（ps：不怕出事的小菜鸡）\n\n## 二、准备\n&emsp;&emsp;开始搞事情了啊，略略略~~~\n\n1. 安装JDK,配置环境（不会百度吧，这都啥年代了，没通网啊还是咋地）  \n    - 安装好了长这样   \n    ![alt](../../img/20200513/Java版本截图.png)\n\n2. 写个HelloWord.java文件\n    ```\n    // 务必注意，Python可以不写\";\",但是Java不可以哦\n    public class HelloWord{\n        public static void main(String[] args){\n            System.out.println(\"Python最棒！！\");\n        }\n    }\n    ```\n3. 编译HelloWord.Java文件并运行\n    - 使用javac HelloWord.java文件\n    - 使用java HelloWord运行\n\n## 三、正文\n&emsp;&emsp;没骗你，前面就是准备哦，后面才刚刚开始呢！\n1. 标识符（老生常谈了好吧）\n    - 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n    - 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n    - 关键字不能用作标识符\n    - 标识符是大小写敏感的\n2. 关键字（网上copy的，不要介意哦）\n<table class=\"reference\">\n<tbody><tr>\n<th>类别</th>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">访问控制</td>\n<td>private</td>\n<td>私有的</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>受保护的</td>\n</tr>\n<tr>\n<td>public</td>\n<td>公共的</td>\n</tr>\n<tr>\n<td>default </td>\n<td>默认</td>\n</tr>\n<tr>\n<td rowspan=\"13\" align=\"center\">类、方法和变量修饰符</td>\n<td>abstract</td>\n<td>声明抽象</td>\n</tr>\n<tr>\n<td>class</td>\n<td>类</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>扩充,继承</td>\n</tr>\n<tr>\n<td>final</td>\n<td>最终值,不可改变的</td>\n</tr>\n<tr>\n<td>implements</td>\n<td>实现（接口）</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>native</td>\n<td>本地，原生方法（非 Java 实现）</td>\n</tr>\n<tr>\n<td>new</td>\n<td>新,创建</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td>严格,精准</td>\n</tr>\n<tr>\n<td>synchronized</td>\n<td>线程,同步</td>\n</tr>\n<tr>\n<td>transient</td>\n<td>短暂</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>易失</td>\n</tr>\n<tr>\n<td rowspan=\"12\" align=\"center\">程序控制语句</td>\n<td>break</td>\n<td>跳出循环</td>\n</tr>\n<tr>\n<td>case</td>\n<td>定义一个值以供 switch 选择</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>继续</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>do</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>else</td>\n<td>否则</td>\n</tr>\n<tr>\n<td>for</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>实例</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>根据值选择执行</td>\n</tr>\n<tr>\n<td>while</td>\n<td>循环</td>\n</tr>\n<tr>\n<td rowspan=\"6\" align=\"center\">错误处理</td>\n<td>assert</td>\n<td>断言表达式是否为真</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>捕捉异常</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>有没有异常都执行</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出一个异常对象</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>声明一个异常可能被抛出</td>\n</tr>\n<tr>\n<td>try</td>\n<td>捕获异常</td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">包相关</td>\n<td>import</td>\n<td>引入</td>\n</tr>\n<tr>\n<td>package</td>\n<td>包</td>\n</tr>\n<tr>\n<td rowspan=\"8\" align=\"center\">基本类型</td>\n<td>boolean</td>\n<td>布尔型</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>字节型</td>\n</tr>\n<tr>\n<td>char</td>\n<td>字符型</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">变量引用</td>\n<td>super</td>\n<td>父类,超类</td>\n</tr>\n<tr>\n<td>this</td>\n<td>本类</td>\n</tr>\n<tr>\n<td>void</td>\n<td>无返回值</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">保留关键字</td>\n<td>goto</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>const</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>null</td>\n<td>空</td>\n</tr>\n</tbody></table>  \n\n## 四、结尾\n&emsp;&emsp;关键字很多，不用全记住，后面慢慢就记住了，首先搞好前面的环境搭建和HelloWord吧！关于后面内容将在第二课介绍！（ps:今天太困了）","slug":"Java/学习Java第一课","published":1,"date":"2020-05-29T02:53:56.186Z","updated":"2020-05-29T02:53:56.186Z","title":"Java/学习Java第一课","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zrz00033cbi5okc0ho3","content":"<h2 id=\"一、-前言\"><a href=\"#一、-前言\" class=\"headerlink\" title=\"一、 前言\"></a>一、 前言</h2><p>再重新过一遍Java，毕竟这门语言还是用的蛮多的额，虽然…虽然Python很棒，我就是要学，我还要两个混起来搞（ps：不怕出事的小菜鸡）</p>\n<h2 id=\"二、准备\"><a href=\"#二、准备\" class=\"headerlink\" title=\"二、准备\"></a>二、准备</h2><p>&emsp;&emsp;开始搞事情了啊，略略略<del>~</del></p>\n<ol>\n<li><p>安装JDK,配置环境（不会百度吧，这都啥年代了，没通网啊还是咋地）  </p>\n<ul>\n<li>安装好了长这样<br><img src=\"../../img/20200513/Java%E7%89%88%E6%9C%AC%E6%88%AA%E5%9B%BE.png\" alt=\"alt\"></li>\n</ul>\n</li>\n<li><p>写个HelloWord.java文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 务必注意，Python可以不写&quot;;&quot;,但是Java不可以哦</span><br><span class=\"line\">public class HelloWord&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Python最棒！！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译HelloWord.Java文件并运行</p>\n<ul>\n<li>使用javac HelloWord.java文件</li>\n<li>使用java HelloWord运行</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、正文\"><a href=\"#三、正文\" class=\"headerlink\" title=\"三、正文\"></a>三、正文</h2><p>&emsp;&emsp;没骗你，前面就是准备哦，后面才刚刚开始呢！</p>\n<ol>\n<li>标识符（老生常谈了好吧）<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n</ul>\n</li>\n<li>关键字（网上copy的，不要介意哦）<table class=\"reference\">\n<tbody><tr>\n<th>类别</th>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">访问控制</td>\n<td>private</td>\n<td>私有的</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>受保护的</td>\n</tr>\n<tr>\n<td>public</td>\n<td>公共的</td>\n</tr>\n<tr>\n<td>default </td>\n<td>默认</td>\n</tr>\n<tr>\n<td rowspan=\"13\" align=\"center\">类、方法和变量修饰符</td>\n<td>abstract</td>\n<td>声明抽象</td>\n</tr>\n<tr>\n<td>class</td>\n<td>类</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>扩充,继承</td>\n</tr>\n<tr>\n<td>final</td>\n<td>最终值,不可改变的</td>\n</tr>\n<tr>\n<td>implements</td>\n<td>实现（接口）</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>native</td>\n<td>本地，原生方法（非 Java 实现）</td>\n</tr>\n<tr>\n<td>new</td>\n<td>新,创建</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td>严格,精准</td>\n</tr>\n<tr>\n<td>synchronized</td>\n<td>线程,同步</td>\n</tr>\n<tr>\n<td>transient</td>\n<td>短暂</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>易失</td>\n</tr>\n<tr>\n<td rowspan=\"12\" align=\"center\">程序控制语句</td>\n<td>break</td>\n<td>跳出循环</td>\n</tr>\n<tr>\n<td>case</td>\n<td>定义一个值以供 switch 选择</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>继续</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>do</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>else</td>\n<td>否则</td>\n</tr>\n<tr>\n<td>for</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>实例</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>根据值选择执行</td>\n</tr>\n<tr>\n<td>while</td>\n<td>循环</td>\n</tr>\n<tr>\n<td rowspan=\"6\" align=\"center\">错误处理</td>\n<td>assert</td>\n<td>断言表达式是否为真</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>捕捉异常</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>有没有异常都执行</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出一个异常对象</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>声明一个异常可能被抛出</td>\n</tr>\n<tr>\n<td>try</td>\n<td>捕获异常</td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">包相关</td>\n<td>import</td>\n<td>引入</td>\n</tr>\n<tr>\n<td>package</td>\n<td>包</td>\n</tr>\n<tr>\n<td rowspan=\"8\" align=\"center\">基本类型</td>\n<td>boolean</td>\n<td>布尔型</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>字节型</td>\n</tr>\n<tr>\n<td>char</td>\n<td>字符型</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">变量引用</td>\n<td>super</td>\n<td>父类,超类</td>\n</tr>\n<tr>\n<td>this</td>\n<td>本类</td>\n</tr>\n<tr>\n<td>void</td>\n<td>无返回值</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">保留关键字</td>\n<td>goto</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>const</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>null</td>\n<td>空</td>\n</tr>\n</tbody></table>  \n\n</li>\n</ol>\n<h2 id=\"四、结尾\"><a href=\"#四、结尾\" class=\"headerlink\" title=\"四、结尾\"></a>四、结尾</h2><p>&emsp;&emsp;关键字很多，不用全记住，后面慢慢就记住了，首先搞好前面的环境搭建和HelloWord吧！关于后面内容将在第二课介绍！（ps:今天太困了）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-前言\"><a href=\"#一、-前言\" class=\"headerlink\" title=\"一、 前言\"></a>一、 前言</h2><p>再重新过一遍Java，毕竟这门语言还是用的蛮多的额，虽然…虽然Python很棒，我就是要学，我还要两个混起来搞（ps：不怕出事的小菜鸡）</p>\n<h2 id=\"二、准备\"><a href=\"#二、准备\" class=\"headerlink\" title=\"二、准备\"></a>二、准备</h2><p>&emsp;&emsp;开始搞事情了啊，略略略<del>~</del></p>\n<ol>\n<li><p>安装JDK,配置环境（不会百度吧，这都啥年代了，没通网啊还是咋地）  </p>\n<ul>\n<li>安装好了长这样<br><img src=\"../../img/20200513/Java%E7%89%88%E6%9C%AC%E6%88%AA%E5%9B%BE.png\" alt=\"alt\"></li>\n</ul>\n</li>\n<li><p>写个HelloWord.java文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 务必注意，Python可以不写&quot;;&quot;,但是Java不可以哦</span><br><span class=\"line\">public class HelloWord&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Python最棒！！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编译HelloWord.Java文件并运行</p>\n<ul>\n<li>使用javac HelloWord.java文件</li>\n<li>使用java HelloWord运行</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、正文\"><a href=\"#三、正文\" class=\"headerlink\" title=\"三、正文\"></a>三、正文</h2><p>&emsp;&emsp;没骗你，前面就是准备哦，后面才刚刚开始呢！</p>\n<ol>\n<li>标识符（老生常谈了好吧）<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n</ul>\n</li>\n<li>关键字（网上copy的，不要介意哦）<table class=\"reference\">\n<tbody><tr>\n<th>类别</th>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">访问控制</td>\n<td>private</td>\n<td>私有的</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>受保护的</td>\n</tr>\n<tr>\n<td>public</td>\n<td>公共的</td>\n</tr>\n<tr>\n<td>default </td>\n<td>默认</td>\n</tr>\n<tr>\n<td rowspan=\"13\" align=\"center\">类、方法和变量修饰符</td>\n<td>abstract</td>\n<td>声明抽象</td>\n</tr>\n<tr>\n<td>class</td>\n<td>类</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>扩充,继承</td>\n</tr>\n<tr>\n<td>final</td>\n<td>最终值,不可改变的</td>\n</tr>\n<tr>\n<td>implements</td>\n<td>实现（接口）</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>native</td>\n<td>本地，原生方法（非 Java 实现）</td>\n</tr>\n<tr>\n<td>new</td>\n<td>新,创建</td>\n</tr>\n<tr>\n<td>static</td>\n<td>静态</td>\n</tr>\n<tr>\n<td>strictfp</td>\n<td>严格,精准</td>\n</tr>\n<tr>\n<td>synchronized</td>\n<td>线程,同步</td>\n</tr>\n<tr>\n<td>transient</td>\n<td>短暂</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>易失</td>\n</tr>\n<tr>\n<td rowspan=\"12\" align=\"center\">程序控制语句</td>\n<td>break</td>\n<td>跳出循环</td>\n</tr>\n<tr>\n<td>case</td>\n<td>定义一个值以供 switch 选择</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>继续</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>do</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>else</td>\n<td>否则</td>\n</tr>\n<tr>\n<td>for</td>\n<td>循环</td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>实例</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>根据值选择执行</td>\n</tr>\n<tr>\n<td>while</td>\n<td>循环</td>\n</tr>\n<tr>\n<td rowspan=\"6\" align=\"center\">错误处理</td>\n<td>assert</td>\n<td>断言表达式是否为真</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>捕捉异常</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>有没有异常都执行</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出一个异常对象</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>声明一个异常可能被抛出</td>\n</tr>\n<tr>\n<td>try</td>\n<td>捕获异常</td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">包相关</td>\n<td>import</td>\n<td>引入</td>\n</tr>\n<tr>\n<td>package</td>\n<td>包</td>\n</tr>\n<tr>\n<td rowspan=\"8\" align=\"center\">基本类型</td>\n<td>boolean</td>\n<td>布尔型</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>字节型</td>\n</tr>\n<tr>\n<td>char</td>\n<td>字符型</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td>int</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长整型</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">变量引用</td>\n<td>super</td>\n<td>父类,超类</td>\n</tr>\n<tr>\n<td>this</td>\n<td>本类</td>\n</tr>\n<tr>\n<td>void</td>\n<td>无返回值</td>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">保留关键字</td>\n<td>goto</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>const</td>\n<td>是关键字，但不能使用</td>\n</tr>\n<tr>\n<td>null</td>\n<td>空</td>\n</tr>\n</tbody></table>  \n\n</li>\n</ol>\n<h2 id=\"四、结尾\"><a href=\"#四、结尾\" class=\"headerlink\" title=\"四、结尾\"></a>四、结尾</h2><p>&emsp;&emsp;关键字很多，不用全记住，后面慢慢就记住了，首先搞好前面的环境搭建和HelloWord吧！关于后面内容将在第二课介绍！（ps:今天太困了）</p>\n"},{"_content":"## 一、面向对象\n嗯？还没有对象？来帮你new一个，嘿嘿嘿嘿，开玩笑呢！   \n面向对象的简单理解，就是给你一个菜谱，你对着菜谱做菜，你今天做，明天做，后天做，只要是按着这个菜谱来做的，就是按照他的规则来，菜谱就是模板，而做出来的菜就是实例，实例是按照模板出来的，不管如何，他总是和模板相似，这其实就是面向对象的一个过程。而面向对象的三大基本特点：封装、继承、多态，我们来一一理解。   \n\n- 封装\n    - 简单来讲，封装就是一个模板，菜谱就是，它是高级大厨师封装出来的模板，给不会烧菜的小白做参考\n- 继承\n    - 这点，可以看作是你用菜谱做菜，不管如何，你要用到里面加调料的步骤，这就是继承\n- 多态\n    - 这个最好理解，就是你按照i菜谱做菜，可能真的是小白，第一次勉强做出来了，第二次...第无数次，可能每一次都不一样，而菜谱确是没有变的，这就是多态。\n\n## 二、一个小小的尝试\n- 创建一个菜谱类Recipe，同时具有一些属性，分别为菜名`name`和菜的内容`content`\n    ```\n    class Recipe{\n        public String name;\n        Public String content;\n    }\n    ```\n- 创建一个实例，炒菜(比如：xxx)\n    ```\n    Recipe xxx = new Recipe();\n    ```\n\n## 三、关键内容\n刚刚我们尝试了一下，创建一个菜谱类，并包含两个字段，可以简单理解为类的属性，这里我们介绍定义在类中的方法，其实可以简单理解为C语言中的函数（ps:说的不是很谨慎，大概可以这样理解）\n- 方法\n    ```\n    修饰符 方法返回类型 方法名(方法参数列表) {\n        若干方法语句;\n        return 方法返回值;\n    }\n    ```\n    关于修饰符，之前有提到过的   \n    `public\t公共的  允许外部调用`   \n    `private\t私有的  不允许外部调用`   \n    `protected\t受保护的 不允许外部调用,允许子类调用`\n\n- 方法的传参   \n我们在定义方法时，通常需要考虑时候要给这个方法传递参数，这一点很重要，而且在设计完方法后，调用时要对应使用。\n    ```\n    public void setNameAndAge(String name, int age){\n        ...\n    }\n    ```\n    在使用这个方法时，务必要注意参数的类型\n    - 可变参数 (用`类型...`定义)  \n    关于这个可变参数，简单理解就是参数可以接受一个数组，从而实现可变参数,注意，务必将属性设置为数组，否则接收参数就会错误！\n        ```\n        public void setName(String... name){\n            ...\n        }\n        ```\n- 构造方法\n不知你是否有过疑惑，刚刚实例化是怎么操作的？为什么可以这样？\n    ```\n    Recipe xxx = new Recipe();\n    ```\n    其本质原理是编译器会默认生成一个构造方法，其本质长这个样子\n    ```\n    class Recipe{\n        public String name;\n        Public String content;\n\n        public Recipe(){\n\n        }\n    }\n    ```\n    那么，编译器会自动默认一个，我们可以自己写一个麻？答案是可以的，而且还可以写参数哦，这样就可以实现使用类实例化时就给对象赋一个初始值哦。(ps:若是改变了构造方法，编译器就不会自动创建一个，这样我们在使用中要注意若是我们改变构造方法，让其变为可以接受参数的构造方法，原本不传参数的构造方法就失效了哦，要使用也很简单，再写一遍不就好了，哈哈哈，看下面代码部分。)\n    ```\n    class Recipe{\n            public String name;\n            Public String content;\n\n            public Recipe(){\n\n            }\n            public Recipe(String name){\n                this.name = name;\n            }\n        }\n    ```\n- 方法的重载   \n通俗来说就是方法名相同，但各自所需传递的参数不同，从而实现不同的功能。","source":"_posts/Java/学习Java第三课.md","raw":"## 一、面向对象\n嗯？还没有对象？来帮你new一个，嘿嘿嘿嘿，开玩笑呢！   \n面向对象的简单理解，就是给你一个菜谱，你对着菜谱做菜，你今天做，明天做，后天做，只要是按着这个菜谱来做的，就是按照他的规则来，菜谱就是模板，而做出来的菜就是实例，实例是按照模板出来的，不管如何，他总是和模板相似，这其实就是面向对象的一个过程。而面向对象的三大基本特点：封装、继承、多态，我们来一一理解。   \n\n- 封装\n    - 简单来讲，封装就是一个模板，菜谱就是，它是高级大厨师封装出来的模板，给不会烧菜的小白做参考\n- 继承\n    - 这点，可以看作是你用菜谱做菜，不管如何，你要用到里面加调料的步骤，这就是继承\n- 多态\n    - 这个最好理解，就是你按照i菜谱做菜，可能真的是小白，第一次勉强做出来了，第二次...第无数次，可能每一次都不一样，而菜谱确是没有变的，这就是多态。\n\n## 二、一个小小的尝试\n- 创建一个菜谱类Recipe，同时具有一些属性，分别为菜名`name`和菜的内容`content`\n    ```\n    class Recipe{\n        public String name;\n        Public String content;\n    }\n    ```\n- 创建一个实例，炒菜(比如：xxx)\n    ```\n    Recipe xxx = new Recipe();\n    ```\n\n## 三、关键内容\n刚刚我们尝试了一下，创建一个菜谱类，并包含两个字段，可以简单理解为类的属性，这里我们介绍定义在类中的方法，其实可以简单理解为C语言中的函数（ps:说的不是很谨慎，大概可以这样理解）\n- 方法\n    ```\n    修饰符 方法返回类型 方法名(方法参数列表) {\n        若干方法语句;\n        return 方法返回值;\n    }\n    ```\n    关于修饰符，之前有提到过的   \n    `public\t公共的  允许外部调用`   \n    `private\t私有的  不允许外部调用`   \n    `protected\t受保护的 不允许外部调用,允许子类调用`\n\n- 方法的传参   \n我们在定义方法时，通常需要考虑时候要给这个方法传递参数，这一点很重要，而且在设计完方法后，调用时要对应使用。\n    ```\n    public void setNameAndAge(String name, int age){\n        ...\n    }\n    ```\n    在使用这个方法时，务必要注意参数的类型\n    - 可变参数 (用`类型...`定义)  \n    关于这个可变参数，简单理解就是参数可以接受一个数组，从而实现可变参数,注意，务必将属性设置为数组，否则接收参数就会错误！\n        ```\n        public void setName(String... name){\n            ...\n        }\n        ```\n- 构造方法\n不知你是否有过疑惑，刚刚实例化是怎么操作的？为什么可以这样？\n    ```\n    Recipe xxx = new Recipe();\n    ```\n    其本质原理是编译器会默认生成一个构造方法，其本质长这个样子\n    ```\n    class Recipe{\n        public String name;\n        Public String content;\n\n        public Recipe(){\n\n        }\n    }\n    ```\n    那么，编译器会自动默认一个，我们可以自己写一个麻？答案是可以的，而且还可以写参数哦，这样就可以实现使用类实例化时就给对象赋一个初始值哦。(ps:若是改变了构造方法，编译器就不会自动创建一个，这样我们在使用中要注意若是我们改变构造方法，让其变为可以接受参数的构造方法，原本不传参数的构造方法就失效了哦，要使用也很简单，再写一遍不就好了，哈哈哈，看下面代码部分。)\n    ```\n    class Recipe{\n            public String name;\n            Public String content;\n\n            public Recipe(){\n\n            }\n            public Recipe(String name){\n                this.name = name;\n            }\n        }\n    ```\n- 方法的重载   \n通俗来说就是方法名相同，但各自所需传递的参数不同，从而实现不同的功能。","slug":"Java/学习Java第三课","published":1,"date":"2020-05-29T02:53:56.202Z","updated":"2020-05-29T02:53:56.202Z","title":"Java/学习Java第三课","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zs200043cbi9hs964ol","content":"<h2 id=\"一、面向对象\"><a href=\"#一、面向对象\" class=\"headerlink\" title=\"一、面向对象\"></a>一、面向对象</h2><p>嗯？还没有对象？来帮你new一个，嘿嘿嘿嘿，开玩笑呢！<br>面向对象的简单理解，就是给你一个菜谱，你对着菜谱做菜，你今天做，明天做，后天做，只要是按着这个菜谱来做的，就是按照他的规则来，菜谱就是模板，而做出来的菜就是实例，实例是按照模板出来的，不管如何，他总是和模板相似，这其实就是面向对象的一个过程。而面向对象的三大基本特点：封装、继承、多态，我们来一一理解。   </p>\n<ul>\n<li>封装<ul>\n<li>简单来讲，封装就是一个模板，菜谱就是，它是高级大厨师封装出来的模板，给不会烧菜的小白做参考</li>\n</ul>\n</li>\n<li>继承<ul>\n<li>这点，可以看作是你用菜谱做菜，不管如何，你要用到里面加调料的步骤，这就是继承</li>\n</ul>\n</li>\n<li>多态<ul>\n<li>这个最好理解，就是你按照i菜谱做菜，可能真的是小白，第一次勉强做出来了，第二次…第无数次，可能每一次都不一样，而菜谱确是没有变的，这就是多态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、一个小小的尝试\"><a href=\"#二、一个小小的尝试\" class=\"headerlink\" title=\"二、一个小小的尝试\"></a>二、一个小小的尝试</h2><ul>\n<li>创建一个菜谱类Recipe，同时具有一些属性，分别为菜名<code>name</code>和菜的内容<code>content</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    Public String content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建一个实例，炒菜(比如：xxx)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recipe xxx &#x3D; new Recipe();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"三、关键内容\"><a href=\"#三、关键内容\" class=\"headerlink\" title=\"三、关键内容\"></a>三、关键内容</h2><p>刚刚我们尝试了一下，创建一个菜谱类，并包含两个字段，可以简单理解为类的属性，这里我们介绍定义在类中的方法，其实可以简单理解为C语言中的函数（ps:说的不是很谨慎，大概可以这样理解）</p>\n<ul>\n<li><p>方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class=\"line\">    若干方法语句;</span><br><span class=\"line\">    return 方法返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  关于修饰符，之前有提到过的<br>  <code>public    公共的  允许外部调用</code><br>  <code>private    私有的  不允许外部调用</code><br>  <code>protected    受保护的 不允许外部调用,允许子类调用</code></p>\n</li>\n<li><p>方法的传参<br>我们在定义方法时，通常需要考虑时候要给这个方法传递参数，这一点很重要，而且在设计完方法后，调用时要对应使用。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setNameAndAge(String name, int age)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  在使用这个方法时，务必要注意参数的类型</p>\n<ul>\n<li>可变参数 (用<code>类型...</code>定义)<br>关于这个可变参数，简单理解就是参数可以接受一个数组，从而实现可变参数,注意，务必将属性设置为数组，否则接收参数就会错误！  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setName(String... name)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>构造方法<br>不知你是否有过疑惑，刚刚实例化是怎么操作的？为什么可以这样？</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recipe xxx &#x3D; new Recipe();</span><br></pre></td></tr></table></figure>\n<p>  其本质原理是编译器会默认生成一个构造方法，其本质长这个样子</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    Public String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Recipe()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  那么，编译器会自动默认一个，我们可以自己写一个麻？答案是可以的，而且还可以写参数哦，这样就可以实现使用类实例化时就给对象赋一个初始值哦。(ps:若是改变了构造方法，编译器就不会自动创建一个，这样我们在使用中要注意若是我们改变构造方法，让其变为可以接受参数的构造方法，原本不传参数的构造方法就失效了哦，要使用也很简单，再写一遍不就好了，哈哈哈，看下面代码部分。)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">        public String name;</span><br><span class=\"line\">        Public String content;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Recipe()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Recipe(String name)&#123;</span><br><span class=\"line\">            this.name &#x3D; name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法的重载<br>通俗来说就是方法名相同，但各自所需传递的参数不同，从而实现不同的功能。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、面向对象\"><a href=\"#一、面向对象\" class=\"headerlink\" title=\"一、面向对象\"></a>一、面向对象</h2><p>嗯？还没有对象？来帮你new一个，嘿嘿嘿嘿，开玩笑呢！<br>面向对象的简单理解，就是给你一个菜谱，你对着菜谱做菜，你今天做，明天做，后天做，只要是按着这个菜谱来做的，就是按照他的规则来，菜谱就是模板，而做出来的菜就是实例，实例是按照模板出来的，不管如何，他总是和模板相似，这其实就是面向对象的一个过程。而面向对象的三大基本特点：封装、继承、多态，我们来一一理解。   </p>\n<ul>\n<li>封装<ul>\n<li>简单来讲，封装就是一个模板，菜谱就是，它是高级大厨师封装出来的模板，给不会烧菜的小白做参考</li>\n</ul>\n</li>\n<li>继承<ul>\n<li>这点，可以看作是你用菜谱做菜，不管如何，你要用到里面加调料的步骤，这就是继承</li>\n</ul>\n</li>\n<li>多态<ul>\n<li>这个最好理解，就是你按照i菜谱做菜，可能真的是小白，第一次勉强做出来了，第二次…第无数次，可能每一次都不一样，而菜谱确是没有变的，这就是多态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、一个小小的尝试\"><a href=\"#二、一个小小的尝试\" class=\"headerlink\" title=\"二、一个小小的尝试\"></a>二、一个小小的尝试</h2><ul>\n<li>创建一个菜谱类Recipe，同时具有一些属性，分别为菜名<code>name</code>和菜的内容<code>content</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    Public String content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建一个实例，炒菜(比如：xxx)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recipe xxx &#x3D; new Recipe();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"三、关键内容\"><a href=\"#三、关键内容\" class=\"headerlink\" title=\"三、关键内容\"></a>三、关键内容</h2><p>刚刚我们尝试了一下，创建一个菜谱类，并包含两个字段，可以简单理解为类的属性，这里我们介绍定义在类中的方法，其实可以简单理解为C语言中的函数（ps:说的不是很谨慎，大概可以这样理解）</p>\n<ul>\n<li><p>方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class=\"line\">    若干方法语句;</span><br><span class=\"line\">    return 方法返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  关于修饰符，之前有提到过的<br>  <code>public    公共的  允许外部调用</code><br>  <code>private    私有的  不允许外部调用</code><br>  <code>protected    受保护的 不允许外部调用,允许子类调用</code></p>\n</li>\n<li><p>方法的传参<br>我们在定义方法时，通常需要考虑时候要给这个方法传递参数，这一点很重要，而且在设计完方法后，调用时要对应使用。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setNameAndAge(String name, int age)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  在使用这个方法时，务必要注意参数的类型</p>\n<ul>\n<li>可变参数 (用<code>类型...</code>定义)<br>关于这个可变参数，简单理解就是参数可以接受一个数组，从而实现可变参数,注意，务必将属性设置为数组，否则接收参数就会错误！  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setName(String... name)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>构造方法<br>不知你是否有过疑惑，刚刚实例化是怎么操作的？为什么可以这样？</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recipe xxx &#x3D; new Recipe();</span><br></pre></td></tr></table></figure>\n<p>  其本质原理是编译器会默认生成一个构造方法，其本质长这个样子</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    Public String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Recipe()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  那么，编译器会自动默认一个，我们可以自己写一个麻？答案是可以的，而且还可以写参数哦，这样就可以实现使用类实例化时就给对象赋一个初始值哦。(ps:若是改变了构造方法，编译器就不会自动创建一个，这样我们在使用中要注意若是我们改变构造方法，让其变为可以接受参数的构造方法，原本不传参数的构造方法就失效了哦，要使用也很简单，再写一遍不就好了，哈哈哈，看下面代码部分。)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Recipe&#123;</span><br><span class=\"line\">        public String name;</span><br><span class=\"line\">        Public String content;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Recipe()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Recipe(String name)&#123;</span><br><span class=\"line\">            this.name &#x3D; name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>方法的重载<br>通俗来说就是方法名相同，但各自所需传递的参数不同，从而实现不同的功能。</p>\n</li>\n</ul>\n"},{"_content":"## 一、基本数据类型\n- 整数类型 byte，short,int,long\n    - byte:-128~127\n    - short:-32768~32767\n    - int:-2147483648 ~ 2147483647\n    - long: -9223372036854775808 ~ 9223372036854775807\n- 浮点数类型 float,double\n    - float:3.4x10^38\n    - double:1.79x10^308\n- 字符类型 char\n    - 字符使用`''`表示\n    - 字符串使用`\"\"`表示，且需要`String`来表示\n- 布尔类型 boolean\n\n## 二、三元运算符\n- `b?x:y`\n    - 会首先计算`b`，如果`b`为true，则只计算`x`，否则，只计算`y`\n\n## 三、数组类型\n- 例如定义一个整型数组\n    - `int[] a = new int[3];` \n    - 当然我们可以不用这样写，直接赋值，就不用写数组长度，上述代码非可以写成这样`int[] a = new int[]{11,22,33};`或者这样`int[] a = {11,22,33};`\n- 对于一个数组类型，我们可以使用`length`来获取数组的长度\n    - a.length; //结果为3\n\n## 四、程序的输入与输出\n- 输出（相对输入容易一点）\n    - `System.out.println(\"xxx\");`这就是输出语句，当然在输出中我们还可以大做文章\n        - 这个时候语句可以写成`System.out.printf(\"xxx\");`注意看`print`变了，后面怎么玩，其实和C语言是差不多相通的\n- 输入\n    - 导入包`import java.util.Scanner;`\n    - 新建一个对象`Scanner scanner = new Scanner(System.in);`\n    - 读取输入`int a = scanner.nextInt();`\n    - 上述三步才完成了基本的输入，第三部中有很多可以自己定义的地方，比如数据类型\n\n## 五、流程控制\n- if else\n    - 这个结构其实和Python极为相似，但是不同的是，这里的if后面的语句必须有括号括起来，否则会报错,并且Java的`else if`连用是分开的，在python中可以用`elif`来表示\n        - eg 单个if使用\n            ```\n            int a = 8;\n            if (a >= 5) {\n                System.out.println(\"a>5\");\n            }\n            ```\n        - eg if和else连用\n            ```\n            int a = 8;\n            if (a >= 15) {\n                System.out.println(\"a>=15\");\n            }else{\n                System.out.println(\"a<15\");\n            }\n            ```\n        - eg if和else if连用\n            ```\n            int a = 8;\n            if (a >= 15) {\n                System.out.println(\"a>=15\");\n            }else if (a >= 10){\n                System.out.println(\"10<=a<15\");\n            }else{\n                System.out.println(\"a<10\");\n            }\n            ```\n- switch\n    - switch其实就是一个多重选择，在给定选项中选择对应数据插入程序，程序执行相应操作\n    - 一般语法结构\n        ```\n        switch (option):\n        case option1:\n            xxx;\n            break;\n        case option2:\n            xxx;\n            break;\n        ...\n        default:\n            xxx;\n            break;\n        ```\n    - 注意上述表示，`case`会枚举`option`中的每一种操作，当然`default`表示，若枚举的都没有，直接执行对应结果就好,关于`break`我们在后面讲解\n        - eg\n            ```\n            import java.util.Scanner;\n\n            public class LearnSwitch {\n                public static void main(String[] args) {\n                    Scanner num = new Scanner(System.in);\n                    int n = num.nextInt();\n                    num.close();\n                    switch (n) {\n                    case 1:\n                        System.out.println(\"1\");\n                        break;\n                    case 2:\n                        System.out.println(\"2\");\n                        break;\n                    default:\n                        System.out.println(\"no in switch!\");\n                        break;\t\t\t\n                    }\n                }\n            }\n            ```\n            该代码，若是输入1或者2就会被`case`捕捉到，执行相应语句，若没有捕捉到，则执行`default`语句。\n- while\n    - while循环语句\n    - 一般语法结构\n        ```\n        while (条件){\n            需要执行的语句\n        }\n        ```\n    - 比如我们执行1+2+3+...+100\n        ```\n        public class Sum{\n            public static void main(String[] args){\n                int n = 1;\n                int sum = 0;\n                while (n<=100){\n                    sum += n;\n                    n++;\n                }\n                System.out.println(sum);\n            }\n        }\n        ```\n- do while\n    - 和while相似，while是先判断再做，do while是先做再判断\n    - 一般语法结构\n        ```\n        do {\n            需要执行的语句\n        }while (条件);\n        ```\n\n- for\n    - emmmm,这个就写个代码吧，和c语言基本一致\n        ```\n        public class Sum {\n        public static void main(String[] args) {\n            int sum = 0;\n            for (int i=1; i<=100; i++) {\n                sum = sum + i;\n            }\n            System.out.println(sum);\n            }\n        }\n        ```\n- break && continue\n    - 他们两兄弟在循环中用的最多，也是最频繁\n    - break会跳出当前循环\n    - continue则是提前结束本次循环","source":"_posts/Java/学习Java第二课.md","raw":"## 一、基本数据类型\n- 整数类型 byte，short,int,long\n    - byte:-128~127\n    - short:-32768~32767\n    - int:-2147483648 ~ 2147483647\n    - long: -9223372036854775808 ~ 9223372036854775807\n- 浮点数类型 float,double\n    - float:3.4x10^38\n    - double:1.79x10^308\n- 字符类型 char\n    - 字符使用`''`表示\n    - 字符串使用`\"\"`表示，且需要`String`来表示\n- 布尔类型 boolean\n\n## 二、三元运算符\n- `b?x:y`\n    - 会首先计算`b`，如果`b`为true，则只计算`x`，否则，只计算`y`\n\n## 三、数组类型\n- 例如定义一个整型数组\n    - `int[] a = new int[3];` \n    - 当然我们可以不用这样写，直接赋值，就不用写数组长度，上述代码非可以写成这样`int[] a = new int[]{11,22,33};`或者这样`int[] a = {11,22,33};`\n- 对于一个数组类型，我们可以使用`length`来获取数组的长度\n    - a.length; //结果为3\n\n## 四、程序的输入与输出\n- 输出（相对输入容易一点）\n    - `System.out.println(\"xxx\");`这就是输出语句，当然在输出中我们还可以大做文章\n        - 这个时候语句可以写成`System.out.printf(\"xxx\");`注意看`print`变了，后面怎么玩，其实和C语言是差不多相通的\n- 输入\n    - 导入包`import java.util.Scanner;`\n    - 新建一个对象`Scanner scanner = new Scanner(System.in);`\n    - 读取输入`int a = scanner.nextInt();`\n    - 上述三步才完成了基本的输入，第三部中有很多可以自己定义的地方，比如数据类型\n\n## 五、流程控制\n- if else\n    - 这个结构其实和Python极为相似，但是不同的是，这里的if后面的语句必须有括号括起来，否则会报错,并且Java的`else if`连用是分开的，在python中可以用`elif`来表示\n        - eg 单个if使用\n            ```\n            int a = 8;\n            if (a >= 5) {\n                System.out.println(\"a>5\");\n            }\n            ```\n        - eg if和else连用\n            ```\n            int a = 8;\n            if (a >= 15) {\n                System.out.println(\"a>=15\");\n            }else{\n                System.out.println(\"a<15\");\n            }\n            ```\n        - eg if和else if连用\n            ```\n            int a = 8;\n            if (a >= 15) {\n                System.out.println(\"a>=15\");\n            }else if (a >= 10){\n                System.out.println(\"10<=a<15\");\n            }else{\n                System.out.println(\"a<10\");\n            }\n            ```\n- switch\n    - switch其实就是一个多重选择，在给定选项中选择对应数据插入程序，程序执行相应操作\n    - 一般语法结构\n        ```\n        switch (option):\n        case option1:\n            xxx;\n            break;\n        case option2:\n            xxx;\n            break;\n        ...\n        default:\n            xxx;\n            break;\n        ```\n    - 注意上述表示，`case`会枚举`option`中的每一种操作，当然`default`表示，若枚举的都没有，直接执行对应结果就好,关于`break`我们在后面讲解\n        - eg\n            ```\n            import java.util.Scanner;\n\n            public class LearnSwitch {\n                public static void main(String[] args) {\n                    Scanner num = new Scanner(System.in);\n                    int n = num.nextInt();\n                    num.close();\n                    switch (n) {\n                    case 1:\n                        System.out.println(\"1\");\n                        break;\n                    case 2:\n                        System.out.println(\"2\");\n                        break;\n                    default:\n                        System.out.println(\"no in switch!\");\n                        break;\t\t\t\n                    }\n                }\n            }\n            ```\n            该代码，若是输入1或者2就会被`case`捕捉到，执行相应语句，若没有捕捉到，则执行`default`语句。\n- while\n    - while循环语句\n    - 一般语法结构\n        ```\n        while (条件){\n            需要执行的语句\n        }\n        ```\n    - 比如我们执行1+2+3+...+100\n        ```\n        public class Sum{\n            public static void main(String[] args){\n                int n = 1;\n                int sum = 0;\n                while (n<=100){\n                    sum += n;\n                    n++;\n                }\n                System.out.println(sum);\n            }\n        }\n        ```\n- do while\n    - 和while相似，while是先判断再做，do while是先做再判断\n    - 一般语法结构\n        ```\n        do {\n            需要执行的语句\n        }while (条件);\n        ```\n\n- for\n    - emmmm,这个就写个代码吧，和c语言基本一致\n        ```\n        public class Sum {\n        public static void main(String[] args) {\n            int sum = 0;\n            for (int i=1; i<=100; i++) {\n                sum = sum + i;\n            }\n            System.out.println(sum);\n            }\n        }\n        ```\n- break && continue\n    - 他们两兄弟在循环中用的最多，也是最频繁\n    - break会跳出当前循环\n    - continue则是提前结束本次循环","slug":"Java/学习Java第二课","published":1,"date":"2020-05-29T02:53:56.202Z","updated":"2020-05-29T02:53:56.202Z","title":"Java/学习Java第二课","comments":1,"layout":"post","photos":[],"link":"","_id":"ckarn4zs500053cbies54b7fw","content":"<h2 id=\"一、基本数据类型\"><a href=\"#一、基本数据类型\" class=\"headerlink\" title=\"一、基本数据类型\"></a>一、基本数据类型</h2><ul>\n<li>整数类型 byte，short,int,long<ul>\n<li>byte:-128~127</li>\n<li>short:-32768~32767</li>\n<li>int:-2147483648 ~ 2147483647</li>\n<li>long: -9223372036854775808 ~ 9223372036854775807</li>\n</ul>\n</li>\n<li>浮点数类型 float,double<ul>\n<li>float:3.4x10^38</li>\n<li>double:1.79x10^308</li>\n</ul>\n</li>\n<li>字符类型 char<ul>\n<li>字符使用<code>&#39;&#39;</code>表示</li>\n<li>字符串使用<code>&quot;&quot;</code>表示，且需要<code>String</code>来表示</li>\n</ul>\n</li>\n<li>布尔类型 boolean</li>\n</ul>\n<h2 id=\"二、三元运算符\"><a href=\"#二、三元运算符\" class=\"headerlink\" title=\"二、三元运算符\"></a>二、三元运算符</h2><ul>\n<li><code>b?x:y</code><ul>\n<li>会首先计算<code>b</code>，如果<code>b</code>为true，则只计算<code>x</code>，否则，只计算<code>y</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、数组类型\"><a href=\"#三、数组类型\" class=\"headerlink\" title=\"三、数组类型\"></a>三、数组类型</h2><ul>\n<li>例如定义一个整型数组<ul>\n<li><code>int[] a = new int[3];</code> </li>\n<li>当然我们可以不用这样写，直接赋值，就不用写数组长度，上述代码非可以写成这样<code>int[] a = new int[]{11,22,33};</code>或者这样<code>int[] a = {11,22,33};</code></li>\n</ul>\n</li>\n<li>对于一个数组类型，我们可以使用<code>length</code>来获取数组的长度<ul>\n<li>a.length; //结果为3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、程序的输入与输出\"><a href=\"#四、程序的输入与输出\" class=\"headerlink\" title=\"四、程序的输入与输出\"></a>四、程序的输入与输出</h2><ul>\n<li>输出（相对输入容易一点）<ul>\n<li><code>System.out.println(&quot;xxx&quot;);</code>这就是输出语句，当然在输出中我们还可以大做文章<ul>\n<li>这个时候语句可以写成<code>System.out.printf(&quot;xxx&quot;);</code>注意看<code>print</code>变了，后面怎么玩，其实和C语言是差不多相通的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输入<ul>\n<li>导入包<code>import java.util.Scanner;</code></li>\n<li>新建一个对象<code>Scanner scanner = new Scanner(System.in);</code></li>\n<li>读取输入<code>int a = scanner.nextInt();</code></li>\n<li>上述三步才完成了基本的输入，第三部中有很多可以自己定义的地方，比如数据类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、流程控制\"><a href=\"#五、流程控制\" class=\"headerlink\" title=\"五、流程控制\"></a>五、流程控制</h2><ul>\n<li><p>if else</p>\n<ul>\n<li>这个结构其实和Python极为相似，但是不同的是，这里的if后面的语句必须有括号括起来，否则会报错,并且Java的<code>else if</code>连用是分开的，在python中可以用<code>elif</code>来表示<ul>\n<li>eg 单个if使用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 5) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;5&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>eg if和else连用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 15) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;&#x3D;15&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    System.out.println(&quot;a&lt;15&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>eg if和else if连用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 15) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;&#x3D;15&quot;);</span><br><span class=\"line\">&#125;else if (a &gt;&#x3D; 10)&#123;</span><br><span class=\"line\">    System.out.println(&quot;10&lt;&#x3D;a&lt;15&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    System.out.println(&quot;a&lt;10&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>switch</p>\n<ul>\n<li>switch其实就是一个多重选择，在给定选项中选择对应数据插入程序，程序执行相应操作</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch (option):</span><br><span class=\"line\">case option1:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case option2:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">...</span><br><span class=\"line\">default:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br></pre></td></tr></table></figure></li>\n<li>注意上述表示，<code>case</code>会枚举<code>option</code>中的每一种操作，当然<code>default</code>表示，若枚举的都没有，直接执行对应结果就好,关于<code>break</code>我们在后面讲解<ul>\n<li>eg  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LearnSwitch &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Scanner num &#x3D; new Scanner(System.in);</span><br><span class=\"line\">        int n &#x3D; num.nextInt();</span><br><span class=\"line\">        num.close();</span><br><span class=\"line\">        switch (n) &#123;</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            System.out.println(&quot;1&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            System.out.println(&quot;2&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            System.out.println(&quot;no in switch!&quot;);</span><br><span class=\"line\">            break;\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  该代码，若是输入1或者2就会被<code>case</code>捕捉到，执行相应语句，若没有捕捉到，则执行<code>default</code>语句。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>while</p>\n<ul>\n<li>while循环语句</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (条件)&#123;</span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>比如我们执行1+2+3+…+100  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sum&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        int n &#x3D; 1;</span><br><span class=\"line\">        int sum &#x3D; 0;</span><br><span class=\"line\">        while (n&lt;&#x3D;100)&#123;</span><br><span class=\"line\">            sum +&#x3D; n;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>do while</p>\n<ul>\n<li>和while相似，while是先判断再做，do while是先做再判断</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123;</span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\">&#125;while (条件);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>for</p>\n<ul>\n<li>emmmm,这个就写个代码吧，和c语言基本一致  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sum &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    int sum &#x3D; 0;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;100; i++) &#123;</span><br><span class=\"line\">        sum &#x3D; sum + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>break &amp;&amp; continue</p>\n<ul>\n<li>他们两兄弟在循环中用的最多，也是最频繁</li>\n<li>break会跳出当前循环</li>\n<li>continue则是提前结束本次循环</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、基本数据类型\"><a href=\"#一、基本数据类型\" class=\"headerlink\" title=\"一、基本数据类型\"></a>一、基本数据类型</h2><ul>\n<li>整数类型 byte，short,int,long<ul>\n<li>byte:-128~127</li>\n<li>short:-32768~32767</li>\n<li>int:-2147483648 ~ 2147483647</li>\n<li>long: -9223372036854775808 ~ 9223372036854775807</li>\n</ul>\n</li>\n<li>浮点数类型 float,double<ul>\n<li>float:3.4x10^38</li>\n<li>double:1.79x10^308</li>\n</ul>\n</li>\n<li>字符类型 char<ul>\n<li>字符使用<code>&#39;&#39;</code>表示</li>\n<li>字符串使用<code>&quot;&quot;</code>表示，且需要<code>String</code>来表示</li>\n</ul>\n</li>\n<li>布尔类型 boolean</li>\n</ul>\n<h2 id=\"二、三元运算符\"><a href=\"#二、三元运算符\" class=\"headerlink\" title=\"二、三元运算符\"></a>二、三元运算符</h2><ul>\n<li><code>b?x:y</code><ul>\n<li>会首先计算<code>b</code>，如果<code>b</code>为true，则只计算<code>x</code>，否则，只计算<code>y</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、数组类型\"><a href=\"#三、数组类型\" class=\"headerlink\" title=\"三、数组类型\"></a>三、数组类型</h2><ul>\n<li>例如定义一个整型数组<ul>\n<li><code>int[] a = new int[3];</code> </li>\n<li>当然我们可以不用这样写，直接赋值，就不用写数组长度，上述代码非可以写成这样<code>int[] a = new int[]{11,22,33};</code>或者这样<code>int[] a = {11,22,33};</code></li>\n</ul>\n</li>\n<li>对于一个数组类型，我们可以使用<code>length</code>来获取数组的长度<ul>\n<li>a.length; //结果为3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、程序的输入与输出\"><a href=\"#四、程序的输入与输出\" class=\"headerlink\" title=\"四、程序的输入与输出\"></a>四、程序的输入与输出</h2><ul>\n<li>输出（相对输入容易一点）<ul>\n<li><code>System.out.println(&quot;xxx&quot;);</code>这就是输出语句，当然在输出中我们还可以大做文章<ul>\n<li>这个时候语句可以写成<code>System.out.printf(&quot;xxx&quot;);</code>注意看<code>print</code>变了，后面怎么玩，其实和C语言是差不多相通的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输入<ul>\n<li>导入包<code>import java.util.Scanner;</code></li>\n<li>新建一个对象<code>Scanner scanner = new Scanner(System.in);</code></li>\n<li>读取输入<code>int a = scanner.nextInt();</code></li>\n<li>上述三步才完成了基本的输入，第三部中有很多可以自己定义的地方，比如数据类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、流程控制\"><a href=\"#五、流程控制\" class=\"headerlink\" title=\"五、流程控制\"></a>五、流程控制</h2><ul>\n<li><p>if else</p>\n<ul>\n<li>这个结构其实和Python极为相似，但是不同的是，这里的if后面的语句必须有括号括起来，否则会报错,并且Java的<code>else if</code>连用是分开的，在python中可以用<code>elif</code>来表示<ul>\n<li>eg 单个if使用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 5) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;5&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>eg if和else连用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 15) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;&#x3D;15&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    System.out.println(&quot;a&lt;15&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>eg if和else if连用  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a &#x3D; 8;</span><br><span class=\"line\">if (a &gt;&#x3D; 15) &#123;</span><br><span class=\"line\">    System.out.println(&quot;a&gt;&#x3D;15&quot;);</span><br><span class=\"line\">&#125;else if (a &gt;&#x3D; 10)&#123;</span><br><span class=\"line\">    System.out.println(&quot;10&lt;&#x3D;a&lt;15&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    System.out.println(&quot;a&lt;10&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>switch</p>\n<ul>\n<li>switch其实就是一个多重选择，在给定选项中选择对应数据插入程序，程序执行相应操作</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch (option):</span><br><span class=\"line\">case option1:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">case option2:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">...</span><br><span class=\"line\">default:</span><br><span class=\"line\">    xxx;</span><br><span class=\"line\">    break;</span><br></pre></td></tr></table></figure></li>\n<li>注意上述表示，<code>case</code>会枚举<code>option</code>中的每一种操作，当然<code>default</code>表示，若枚举的都没有，直接执行对应结果就好,关于<code>break</code>我们在后面讲解<ul>\n<li>eg  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LearnSwitch &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Scanner num &#x3D; new Scanner(System.in);</span><br><span class=\"line\">        int n &#x3D; num.nextInt();</span><br><span class=\"line\">        num.close();</span><br><span class=\"line\">        switch (n) &#123;</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            System.out.println(&quot;1&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case 2:</span><br><span class=\"line\">            System.out.println(&quot;2&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            System.out.println(&quot;no in switch!&quot;);</span><br><span class=\"line\">            break;\t\t\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  该代码，若是输入1或者2就会被<code>case</code>捕捉到，执行相应语句，若没有捕捉到，则执行<code>default</code>语句。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>while</p>\n<ul>\n<li>while循环语句</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (条件)&#123;</span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>比如我们执行1+2+3+…+100  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sum&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        int n &#x3D; 1;</span><br><span class=\"line\">        int sum &#x3D; 0;</span><br><span class=\"line\">        while (n&lt;&#x3D;100)&#123;</span><br><span class=\"line\">            sum +&#x3D; n;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>do while</p>\n<ul>\n<li>和while相似，while是先判断再做，do while是先做再判断</li>\n<li>一般语法结构  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123;</span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\">&#125;while (条件);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>for</p>\n<ul>\n<li>emmmm,这个就写个代码吧，和c语言基本一致  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sum &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    int sum &#x3D; 0;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;100; i++) &#123;</span><br><span class=\"line\">        sum &#x3D; sum + i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>break &amp;&amp; continue</p>\n<ul>\n<li>他们两兄弟在循环中用的最多，也是最频繁</li>\n<li>break会跳出当前循环</li>\n<li>continue则是提前结束本次循环</li>\n</ul>\n</li>\n</ul>\n"},{"_content":"## 前言\n本着是使用树莓派做一个个人天气预报的，通过百度也看到很多大神使用各种各样的方法来实现，本着简单、免费的想法，我去弄了个高德的开发者账号（ps:其实就是懒，哈哈哈哈哈），这个账号认证后每天有\t300000次，其实也够我们自己去使用了，哈哈哈哈！后面关于文本合成语音的部分，打算接入阿里、讯飞的api的，emmm有点贵，算了，使用第三方库讲究着用吧（ps:声音确实是好僵硬）！\n\n## 准备\n1. 在这里，我们需要提前安装好requests库、pyttsx3库。   \n    `pip3 install requests`   \n    `pip3 install pyttsx3`\n2. 进入高德开发者平台，注册账号，按照流程创建一个应用（是web服务的api），此时就可以获取到一个`key`值，这个值在后面会用到，记得保存一下。   \n3. 打开高德的api使用文档，好了，开始撸代码...\n## 开始撸代码\n这里我们有三个任务   \n- 获取当前地理位置   \n- 根据当前的地理位置来获取天气情况\n- 将得到的文本数据使用语音合成出来\n\n1. 首先我们来看如何获取地理位置信息\n- 这里我们可以使用web服务的api中的IP查询来获取到对应的城市名和城市的adcode编码\n- 这里我们可以看下这张表\n    <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"2\"><p>参数名</p></th><th><p>含义</p></th><th><p>规则说明</p></th><th><p>是否必须</p></th><th><p>缺省值</p></th></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>key</p></td><td><p>请求服务权限标识</p></td><td><p>用户在高德地图官网申请Web服务API类型KEY</a></p></td><td><p>必填</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>ip</p></td><td><p>ip地址</p></td><td><p>需要搜索的IP地址（仅支持国内）</p><p>若用户不填写IP，则取客户http之中的请求来进行定位</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>sig</p></td><td><p>签名</p></td><td><p>选择数字签名认证的付费用户必填</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>output</p></td><td><p>返回格式</p></td><td><p>可选值：JSON,XML</p></td><td><p>可选</p></td><td><p>JSON</p></td></tr></tbody></table></div></div>\n\n    ----\n\n    <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"3\"><p>名称</p></th><th><p>含义</p></th><th><p>规则说明</p></th></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>status</p></td><td><p>返回结果状态值</p></td><td><p>值为0或1,0表示失败；1表示成功</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>info</p></td><td><p>返回状态说明</p></td><td><p>返回状态说明，status为0时，info返回错误原因，否则返回“OK”。</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>infocode</p></td><td><p>状态码</p></td><td><p>返回状态说明,10000代表正确,详情参阅info状态表</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>province</p></td><td><p>省份名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果在局域网 IP网段内，则返回“局域网”；</p><p>非法IP以及国外IP则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>city</p></td><td><p>城市名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果为局域网网段内IP或者非法IP或国外IP，则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>adcode</p></td><td><p data-spm-anchor-id=\"0.0.0.i2.25166ec7hbUfrG\">城市的adcode编码</p></td><td><p><br></p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>rectangle</p></td><td data-spm-anchor-id=\"0.0.0.i3.25166ec7hbUfrG\"><p>所在城市矩形区域范围</p></td><td><p>所在城市范围的左下右上对标对</p></td></tr></tbody></table></div></div>\n\n    我们可以在使用时直接请求，此时可以获取到城市的adcode,那么我们直接调用返回结果即可。\n    ```\n    def get_citycode():\n    # 获取当前位置编码\n    url = 'https://restapi.amap.com/v3/ip?'\n    word = None\n    try:\n        r = requests.get(url, params=set_params(word))\n        text = r.json()\n        adcode = text['adcode']\n    finally:\n        return adcode\n    ```\n2. 获取地区天气情况\n- 这里我们可以使用web服务的api中的天气查询来获取到对应的城市的天气，在api使用说明中明确表示，需要传入的参数至少有adcode哦！！好在我们之前已经获取到了。 \n- 开始请求数据，并处理返回的数据，这里我就取几项数据，具体可以自定义。\n    ```\n    def get_weather():\n    # 获取当前位置天气\n    url = 'https://restapi.amap.com/v3/weather/weatherInfo?'\n    word = get_citycode()\n    weather_dict = {}\n    try:\n        r = requests.get(url, params=set_params(word))\n        text = r.json()\n        if text['info'] == 'OK':\n            weather_dict['-'] = text['lives'][0]['city']\n            weather_dict['天气'] = text['lives'][0]['weather']\n            weather_dict['温度'] = text['lives'][0]['temperature']\n            weather_dict['空气湿度'] = text['lives'][0]['humidity']\n            weather_dict['风向'] = text['lives'][0]['winddirection']\n            weather_dict['风力级别'] = text['lives'][0]['windpower']\n    finally:\n        return weather_dict\n    ```\n3. 开始语音合成处理   \n在这一步，需要使用到pyttsx3，查阅技术文档后，直接使用即可（ps:反正语音不是很好听，也就不做过多解释了，直接上代码）\n    ```\n    def read_data():\n        # 阅读获取的文本\n        weather = get_weather()\n        engine = pyttsx3.init()\n        rate = engine.getProperty('rate')\n        engine.setProperty('rate', rate-10)\n        engine.say(weather)\n        engine.runAndWait()\n    ```\n4. 补充，关于代码中set_params函数部分，可以这样写就行\n    ```\n    def set_params(word):\n    # 设置请求表单\n    if word == None:\n        params = {\n            'key':你自己的key,\n        }\n    else:\n        params = {\n            'key':你自己的key,\n            'city':word,\n            # base是获取当前天气，而all可以返回预报天气，哈哈哈自己慢慢玩。\n            'extensions':'base',\n        }\n    return params\n    ```\n## 结语\n想不到吧，这么快就结束了！！嘿嘿嘿嘿嘿，将代码移植到树莓派上，再写一个自动化脚本，就完事啦。","source":"_posts/使用高德地图API创建一个属于自己的天气闹钟.md","raw":"## 前言\n本着是使用树莓派做一个个人天气预报的，通过百度也看到很多大神使用各种各样的方法来实现，本着简单、免费的想法，我去弄了个高德的开发者账号（ps:其实就是懒，哈哈哈哈哈），这个账号认证后每天有\t300000次，其实也够我们自己去使用了，哈哈哈哈！后面关于文本合成语音的部分，打算接入阿里、讯飞的api的，emmm有点贵，算了，使用第三方库讲究着用吧（ps:声音确实是好僵硬）！\n\n## 准备\n1. 在这里，我们需要提前安装好requests库、pyttsx3库。   \n    `pip3 install requests`   \n    `pip3 install pyttsx3`\n2. 进入高德开发者平台，注册账号，按照流程创建一个应用（是web服务的api），此时就可以获取到一个`key`值，这个值在后面会用到，记得保存一下。   \n3. 打开高德的api使用文档，好了，开始撸代码...\n## 开始撸代码\n这里我们有三个任务   \n- 获取当前地理位置   \n- 根据当前的地理位置来获取天气情况\n- 将得到的文本数据使用语音合成出来\n\n1. 首先我们来看如何获取地理位置信息\n- 这里我们可以使用web服务的api中的IP查询来获取到对应的城市名和城市的adcode编码\n- 这里我们可以看下这张表\n    <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"2\"><p>参数名</p></th><th><p>含义</p></th><th><p>规则说明</p></th><th><p>是否必须</p></th><th><p>缺省值</p></th></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>key</p></td><td><p>请求服务权限标识</p></td><td><p>用户在高德地图官网申请Web服务API类型KEY</a></p></td><td><p>必填</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>ip</p></td><td><p>ip地址</p></td><td><p>需要搜索的IP地址（仅支持国内）</p><p>若用户不填写IP，则取客户http之中的请求来进行定位</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>sig</p></td><td><p>签名</p></td><td><p>选择数字签名认证的付费用户必填</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>output</p></td><td><p>返回格式</p></td><td><p>可选值：JSON,XML</p></td><td><p>可选</p></td><td><p>JSON</p></td></tr></tbody></table></div></div>\n\n    ----\n\n    <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"3\"><p>名称</p></th><th><p>含义</p></th><th><p>规则说明</p></th></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>status</p></td><td><p>返回结果状态值</p></td><td><p>值为0或1,0表示失败；1表示成功</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>info</p></td><td><p>返回状态说明</p></td><td><p>返回状态说明，status为0时，info返回错误原因，否则返回“OK”。</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>infocode</p></td><td><p>状态码</p></td><td><p>返回状态说明,10000代表正确,详情参阅info状态表</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>province</p></td><td><p>省份名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果在局域网 IP网段内，则返回“局域网”；</p><p>非法IP以及国外IP则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>city</p></td><td><p>城市名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果为局域网网段内IP或者非法IP或国外IP，则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>adcode</p></td><td><p data-spm-anchor-id=\"0.0.0.i2.25166ec7hbUfrG\">城市的adcode编码</p></td><td><p><br></p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>rectangle</p></td><td data-spm-anchor-id=\"0.0.0.i3.25166ec7hbUfrG\"><p>所在城市矩形区域范围</p></td><td><p>所在城市范围的左下右上对标对</p></td></tr></tbody></table></div></div>\n\n    我们可以在使用时直接请求，此时可以获取到城市的adcode,那么我们直接调用返回结果即可。\n    ```\n    def get_citycode():\n    # 获取当前位置编码\n    url = 'https://restapi.amap.com/v3/ip?'\n    word = None\n    try:\n        r = requests.get(url, params=set_params(word))\n        text = r.json()\n        adcode = text['adcode']\n    finally:\n        return adcode\n    ```\n2. 获取地区天气情况\n- 这里我们可以使用web服务的api中的天气查询来获取到对应的城市的天气，在api使用说明中明确表示，需要传入的参数至少有adcode哦！！好在我们之前已经获取到了。 \n- 开始请求数据，并处理返回的数据，这里我就取几项数据，具体可以自定义。\n    ```\n    def get_weather():\n    # 获取当前位置天气\n    url = 'https://restapi.amap.com/v3/weather/weatherInfo?'\n    word = get_citycode()\n    weather_dict = {}\n    try:\n        r = requests.get(url, params=set_params(word))\n        text = r.json()\n        if text['info'] == 'OK':\n            weather_dict['-'] = text['lives'][0]['city']\n            weather_dict['天气'] = text['lives'][0]['weather']\n            weather_dict['温度'] = text['lives'][0]['temperature']\n            weather_dict['空气湿度'] = text['lives'][0]['humidity']\n            weather_dict['风向'] = text['lives'][0]['winddirection']\n            weather_dict['风力级别'] = text['lives'][0]['windpower']\n    finally:\n        return weather_dict\n    ```\n3. 开始语音合成处理   \n在这一步，需要使用到pyttsx3，查阅技术文档后，直接使用即可（ps:反正语音不是很好听，也就不做过多解释了，直接上代码）\n    ```\n    def read_data():\n        # 阅读获取的文本\n        weather = get_weather()\n        engine = pyttsx3.init()\n        rate = engine.getProperty('rate')\n        engine.setProperty('rate', rate-10)\n        engine.say(weather)\n        engine.runAndWait()\n    ```\n4. 补充，关于代码中set_params函数部分，可以这样写就行\n    ```\n    def set_params(word):\n    # 设置请求表单\n    if word == None:\n        params = {\n            'key':你自己的key,\n        }\n    else:\n        params = {\n            'key':你自己的key,\n            'city':word,\n            # base是获取当前天气，而all可以返回预报天气，哈哈哈自己慢慢玩。\n            'extensions':'base',\n        }\n    return params\n    ```\n## 结语\n想不到吧，这么快就结束了！！嘿嘿嘿嘿嘿，将代码移植到树莓派上，再写一个自动化脚本，就完事啦。","slug":"使用高德地图API创建一个属于自己的天气闹钟","published":1,"date":"2020-05-30T14:44:31.722Z","updated":"2020-05-30T14:44:31.722Z","title":"使用高德地图API创建一个属于自己的天气闹钟","_id":"ckatqt44f0000clbi40c3fe1d","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本着是使用树莓派做一个个人天气预报的，通过百度也看到很多大神使用各种各样的方法来实现，本着简单、免费的想法，我去弄了个高德的开发者账号（ps:其实就是懒，哈哈哈哈哈），这个账号认证后每天有    300000次，其实也够我们自己去使用了，哈哈哈哈！后面关于文本合成语音的部分，打算接入阿里、讯飞的api的，emmm有点贵，算了，使用第三方库讲究着用吧（ps:声音确实是好僵硬）！</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ol>\n<li>在这里，我们需要提前安装好requests库、pyttsx3库。<br> <code>pip3 install requests</code><br> <code>pip3 install pyttsx3</code></li>\n<li>进入高德开发者平台，注册账号，按照流程创建一个应用（是web服务的api），此时就可以获取到一个<code>key</code>值，这个值在后面会用到，记得保存一下。   </li>\n<li>打开高德的api使用文档，好了，开始撸代码…<h2 id=\"开始撸代码\"><a href=\"#开始撸代码\" class=\"headerlink\" title=\"开始撸代码\"></a>开始撸代码</h2>这里我们有三个任务   </li>\n</ol>\n<ul>\n<li>获取当前地理位置   </li>\n<li>根据当前的地理位置来获取天气情况</li>\n<li>将得到的文本数据使用语音合成出来</li>\n</ul>\n<ol>\n<li>首先我们来看如何获取地理位置信息</li>\n</ol>\n<ul>\n<li><p>这里我们可以使用web服务的api中的IP查询来获取到对应的城市名和城市的adcode编码</p>\n</li>\n<li><p>这里我们可以看下这张表</p>\n  <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"2\"><p>参数名</p></th><th><p>含义</p></th><th><p>规则说明</p></th><th><p>是否必须</p></th><th><p>缺省值</p></th></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>key</p></td><td><p>请求服务权限标识</p></td><td><p>用户在高德地图官网申请Web服务API类型KEY</a></p></td><td><p>必填</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>ip</p></td><td><p>ip地址</p></td><td><p>需要搜索的IP地址（仅支持国内）</p><p>若用户不填写IP，则取客户http之中的请求来进行定位</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>sig</p></td><td><p>签名</p></td><td><p>选择数字签名认证的付费用户必填</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>output</p></td><td><p>返回格式</p></td><td><p>可选值：JSON,XML</p></td><td><p>可选</p></td><td><p>JSON</p></td></tr></tbody></table></div></div>\n\n<hr>\n  <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"3\"><p>名称</p></th><th><p>含义</p></th><th><p>规则说明</p></th></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>status</p></td><td><p>返回结果状态值</p></td><td><p>值为0或1,0表示失败；1表示成功</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>info</p></td><td><p>返回状态说明</p></td><td><p>返回状态说明，status为0时，info返回错误原因，否则返回“OK”。</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>infocode</p></td><td><p>状态码</p></td><td><p>返回状态说明,10000代表正确,详情参阅info状态表</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>province</p></td><td><p>省份名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果在局域网 IP网段内，则返回“局域网”；</p><p>非法IP以及国外IP则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>city</p></td><td><p>城市名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果为局域网网段内IP或者非法IP或国外IP，则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>adcode</p></td><td><p data-spm-anchor-id=\"0.0.0.i2.25166ec7hbUfrG\">城市的adcode编码</p></td><td><p><br></p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>rectangle</p></td><td data-spm-anchor-id=\"0.0.0.i3.25166ec7hbUfrG\"><p>所在城市矩形区域范围</p></td><td><p>所在城市范围的左下右上对标对</p></td></tr></tbody></table></div></div>\n\n<p>  我们可以在使用时直接请求，此时可以获取到城市的adcode,那么我们直接调用返回结果即可。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_citycode():</span><br><span class=\"line\"># 获取当前位置编码</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;restapi.amap.com&#x2F;v3&#x2F;ip?&#39;</span><br><span class=\"line\">word &#x3D; None</span><br><span class=\"line\">try:</span><br><span class=\"line\">    r &#x3D; requests.get(url, params&#x3D;set_params(word))</span><br><span class=\"line\">    text &#x3D; r.json()</span><br><span class=\"line\">    adcode &#x3D; text[&#39;adcode&#39;]</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    return adcode</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>获取地区天气情况</li>\n</ol>\n<ul>\n<li>这里我们可以使用web服务的api中的天气查询来获取到对应的城市的天气，在api使用说明中明确表示，需要传入的参数至少有adcode哦！！好在我们之前已经获取到了。 </li>\n<li>开始请求数据，并处理返回的数据，这里我就取几项数据，具体可以自定义。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_weather():</span><br><span class=\"line\"># 获取当前位置天气</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;restapi.amap.com&#x2F;v3&#x2F;weather&#x2F;weatherInfo?&#39;</span><br><span class=\"line\">word &#x3D; get_citycode()</span><br><span class=\"line\">weather_dict &#x3D; &#123;&#125;</span><br><span class=\"line\">try:</span><br><span class=\"line\">    r &#x3D; requests.get(url, params&#x3D;set_params(word))</span><br><span class=\"line\">    text &#x3D; r.json()</span><br><span class=\"line\">    if text[&#39;info&#39;] &#x3D;&#x3D; &#39;OK&#39;:</span><br><span class=\"line\">        weather_dict[&#39;-&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;city&#39;]</span><br><span class=\"line\">        weather_dict[&#39;天气&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;weather&#39;]</span><br><span class=\"line\">        weather_dict[&#39;温度&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;temperature&#39;]</span><br><span class=\"line\">        weather_dict[&#39;空气湿度&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;humidity&#39;]</span><br><span class=\"line\">        weather_dict[&#39;风向&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;winddirection&#39;]</span><br><span class=\"line\">        weather_dict[&#39;风力级别&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;windpower&#39;]</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    return weather_dict</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>开始语音合成处理<br>在这一步，需要使用到pyttsx3，查阅技术文档后，直接使用即可（ps:反正语音不是很好听，也就不做过多解释了，直接上代码） <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_data():</span><br><span class=\"line\">    # 阅读获取的文本</span><br><span class=\"line\">    weather &#x3D; get_weather()</span><br><span class=\"line\">    engine &#x3D; pyttsx3.init()</span><br><span class=\"line\">    rate &#x3D; engine.getProperty(&#39;rate&#39;)</span><br><span class=\"line\">    engine.setProperty(&#39;rate&#39;, rate-10)</span><br><span class=\"line\">    engine.say(weather)</span><br><span class=\"line\">    engine.runAndWait()</span><br></pre></td></tr></table></figure></li>\n<li>补充，关于代码中set_params函数部分，可以这样写就行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def set_params(word):</span><br><span class=\"line\"># 设置请求表单</span><br><span class=\"line\">if word &#x3D;&#x3D; None:</span><br><span class=\"line\">    params &#x3D; &#123;</span><br><span class=\"line\">        &#39;key&#39;:你自己的key,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    params &#x3D; &#123;</span><br><span class=\"line\">        &#39;key&#39;:你自己的key,</span><br><span class=\"line\">        &#39;city&#39;:word,</span><br><span class=\"line\">        # base是获取当前天气，而all可以返回预报天气，哈哈哈自己慢慢玩。</span><br><span class=\"line\">        &#39;extensions&#39;:&#39;base&#39;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">return params</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>想不到吧，这么快就结束了！！嘿嘿嘿嘿嘿，将代码移植到树莓派上，再写一个自动化脚本，就完事啦。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本着是使用树莓派做一个个人天气预报的，通过百度也看到很多大神使用各种各样的方法来实现，本着简单、免费的想法，我去弄了个高德的开发者账号（ps:其实就是懒，哈哈哈哈哈），这个账号认证后每天有    300000次，其实也够我们自己去使用了，哈哈哈哈！后面关于文本合成语音的部分，打算接入阿里、讯飞的api的，emmm有点贵，算了，使用第三方库讲究着用吧（ps:声音确实是好僵硬）！</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ol>\n<li>在这里，我们需要提前安装好requests库、pyttsx3库。<br> <code>pip3 install requests</code><br> <code>pip3 install pyttsx3</code></li>\n<li>进入高德开发者平台，注册账号，按照流程创建一个应用（是web服务的api），此时就可以获取到一个<code>key</code>值，这个值在后面会用到，记得保存一下。   </li>\n<li>打开高德的api使用文档，好了，开始撸代码…<h2 id=\"开始撸代码\"><a href=\"#开始撸代码\" class=\"headerlink\" title=\"开始撸代码\"></a>开始撸代码</h2>这里我们有三个任务   </li>\n</ol>\n<ul>\n<li>获取当前地理位置   </li>\n<li>根据当前的地理位置来获取天气情况</li>\n<li>将得到的文本数据使用语音合成出来</li>\n</ul>\n<ol>\n<li>首先我们来看如何获取地理位置信息</li>\n</ol>\n<ul>\n<li><p>这里我们可以使用web服务的api中的IP查询来获取到对应的城市名和城市的adcode编码</p>\n</li>\n<li><p>这里我们可以看下这张表</p>\n  <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"2\"><p>参数名</p></th><th><p>含义</p></th><th><p>规则说明</p></th><th><p>是否必须</p></th><th><p>缺省值</p></th></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>key</p></td><td><p>请求服务权限标识</p></td><td><p>用户在高德地图官网申请Web服务API类型KEY</a></p></td><td><p>必填</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>ip</p></td><td><p>ip地址</p></td><td><p>需要搜索的IP地址（仅支持国内）</p><p>若用户不填写IP，则取客户http之中的请求来进行定位</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>sig</p></td><td><p>签名</p></td><td><p>选择数字签名认证的付费用户必填</p></td><td><p>可选</p></td><td><p>无</p></td></tr><tr><td colspan=\"2\" style=\"white-space: nowrap;\"><p>output</p></td><td><p>返回格式</p></td><td><p>可选值：JSON,XML</p></td><td><p>可选</p></td><td><p>JSON</p></td></tr></tbody></table></div></div>\n\n<hr>\n  <div class=\"md-atomic\"><div class=\"table-container\" style=\"width:100%;\"><table class=\"md-table  \" data-meta=\"%7B%22width%22%3A%22100%25%22%7D\"><tbody><tr><th colspan=\"3\"><p>名称</p></th><th><p>含义</p></th><th><p>规则说明</p></th></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>status</p></td><td><p>返回结果状态值</p></td><td><p>值为0或1,0表示失败；1表示成功</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>info</p></td><td><p>返回状态说明</p></td><td><p>返回状态说明，status为0时，info返回错误原因，否则返回“OK”。</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>infocode</p></td><td><p>状态码</p></td><td><p>返回状态说明,10000代表正确,详情参阅info状态表</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>province</p></td><td><p>省份名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果在局域网 IP网段内，则返回“局域网”；</p><p>非法IP以及国外IP则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>city</p></td><td><p>城市名称</p></td><td><p>若为直辖市则显示直辖市名称；</p><p>如果为局域网网段内IP或者非法IP或国外IP，则返回空</p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>adcode</p></td><td><p data-spm-anchor-id=\"0.0.0.i2.25166ec7hbUfrG\">城市的adcode编码</p></td><td><p><br></p></td></tr><tr><td colspan=\"3\" style=\"white-space: nowrap;\"><p>rectangle</p></td><td data-spm-anchor-id=\"0.0.0.i3.25166ec7hbUfrG\"><p>所在城市矩形区域范围</p></td><td><p>所在城市范围的左下右上对标对</p></td></tr></tbody></table></div></div>\n\n<p>  我们可以在使用时直接请求，此时可以获取到城市的adcode,那么我们直接调用返回结果即可。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_citycode():</span><br><span class=\"line\"># 获取当前位置编码</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;restapi.amap.com&#x2F;v3&#x2F;ip?&#39;</span><br><span class=\"line\">word &#x3D; None</span><br><span class=\"line\">try:</span><br><span class=\"line\">    r &#x3D; requests.get(url, params&#x3D;set_params(word))</span><br><span class=\"line\">    text &#x3D; r.json()</span><br><span class=\"line\">    adcode &#x3D; text[&#39;adcode&#39;]</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    return adcode</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>获取地区天气情况</li>\n</ol>\n<ul>\n<li>这里我们可以使用web服务的api中的天气查询来获取到对应的城市的天气，在api使用说明中明确表示，需要传入的参数至少有adcode哦！！好在我们之前已经获取到了。 </li>\n<li>开始请求数据，并处理返回的数据，这里我就取几项数据，具体可以自定义。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_weather():</span><br><span class=\"line\"># 获取当前位置天气</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;restapi.amap.com&#x2F;v3&#x2F;weather&#x2F;weatherInfo?&#39;</span><br><span class=\"line\">word &#x3D; get_citycode()</span><br><span class=\"line\">weather_dict &#x3D; &#123;&#125;</span><br><span class=\"line\">try:</span><br><span class=\"line\">    r &#x3D; requests.get(url, params&#x3D;set_params(word))</span><br><span class=\"line\">    text &#x3D; r.json()</span><br><span class=\"line\">    if text[&#39;info&#39;] &#x3D;&#x3D; &#39;OK&#39;:</span><br><span class=\"line\">        weather_dict[&#39;-&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;city&#39;]</span><br><span class=\"line\">        weather_dict[&#39;天气&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;weather&#39;]</span><br><span class=\"line\">        weather_dict[&#39;温度&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;temperature&#39;]</span><br><span class=\"line\">        weather_dict[&#39;空气湿度&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;humidity&#39;]</span><br><span class=\"line\">        weather_dict[&#39;风向&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;winddirection&#39;]</span><br><span class=\"line\">        weather_dict[&#39;风力级别&#39;] &#x3D; text[&#39;lives&#39;][0][&#39;windpower&#39;]</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    return weather_dict</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>开始语音合成处理<br>在这一步，需要使用到pyttsx3，查阅技术文档后，直接使用即可（ps:反正语音不是很好听，也就不做过多解释了，直接上代码） <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_data():</span><br><span class=\"line\">    # 阅读获取的文本</span><br><span class=\"line\">    weather &#x3D; get_weather()</span><br><span class=\"line\">    engine &#x3D; pyttsx3.init()</span><br><span class=\"line\">    rate &#x3D; engine.getProperty(&#39;rate&#39;)</span><br><span class=\"line\">    engine.setProperty(&#39;rate&#39;, rate-10)</span><br><span class=\"line\">    engine.say(weather)</span><br><span class=\"line\">    engine.runAndWait()</span><br></pre></td></tr></table></figure></li>\n<li>补充，关于代码中set_params函数部分，可以这样写就行 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def set_params(word):</span><br><span class=\"line\"># 设置请求表单</span><br><span class=\"line\">if word &#x3D;&#x3D; None:</span><br><span class=\"line\">    params &#x3D; &#123;</span><br><span class=\"line\">        &#39;key&#39;:你自己的key,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    params &#x3D; &#123;</span><br><span class=\"line\">        &#39;key&#39;:你自己的key,</span><br><span class=\"line\">        &#39;city&#39;:word,</span><br><span class=\"line\">        # base是获取当前天气，而all可以返回预报天气，哈哈哈自己慢慢玩。</span><br><span class=\"line\">        &#39;extensions&#39;:&#39;base&#39;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">return params</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>想不到吧，这么快就结束了！！嘿嘿嘿嘿嘿，将代码移植到树莓派上，再写一个自动化脚本，就完事啦。</li>\n</ol>\n"},{"title":"Python连接C实现高效编程demo","date":"2020-05-31T00:54:12.000Z","_content":"## 一、前言\n作为一门经典的编程语言，这些年来，C有着重要的地位，在各个领域的使用都是相当重要的地位！而Python作为较新式的语言，相对而言入门更加简单，适合新手来学习！但是作为一门动态的脚本语言，其效率相对C来说还是有些捉急的。在这里，我们引入一个demo来作为Python和C混合编程的一个基础。\n\n## 二、编写代码\n在这里我会使用对比的方式来比较两种语言计算一个较大数字求和时的耗时情况，从而直观体验其中的差别。同时这里会引入混合编程的概念。   \n1. 编写C的代码\n    ```\n    #include<stdio.h>\n\n    void add(long VALUE){\n        long sum = 0;\n        for (long i = 1;i < VALUE; i ++)\n            sum += i;\n        printf(\"C求和结果为: %ld\\n\", sum);\n    }\n    ```\n2. 编写Python代码\n    ```\n    import time\n\n    VALUE = 9999999\n\n    t1 = time.time()\n    sum = 0\n    for i in range(1, VALUE):\n        sum += i\n    print('for循环求和结果为：'+ str(sum))\n    t2 = time.time()\n    print('for循环求和开销时间为：'+ str(t2-t1))\n    ```\n3. 将之前的C代码编译成Python可以读取调用的文件\n    - gcc -fPIC -shared C的代码 -o 后续调用文件名.so   \n    例如: gcc -fPIC -shared sum.c -o csum.so\n4. 将csum.so加载到Python中，进行编写\n    - 导入库文件`from ctypes import cdll`\n    - 调用文件\n        ```\n        result = cdll.LoadLibrary(\"./csum.so\")\n        result.add(VALUE)\n        ```\n\n5. 最终Python代码sum.py是酱紫\n\n    ```\n    import time\n    from ctypes import cdll\n\n    VALUE = 9999999\n\n    # 使用Python求和\n    t1 = time.time()\n    sum = 0\n    for i in range(1, VALUE):\n        sum += i\n    print('for循环求和结果为：'+ str(sum))\n    t2 = time.time()\n    print('for循环求和开销时间为：'+ str(t2-t1))\n    print('-'*30)\n\n    # Python连接C求和\n    t1 = time.time()\n    result = cdll.LoadLibrary(\"./csum.so\")\n    result.add(VALUE)\n    t2 = time.time()\n    print('使用C求和开销时间为：'+ str(t2-t1))\n    ```\n6. 最终结果\n    ```\n    for循环求和结果为：49999985000001\n    for循环求和开销时间为：3.156290292739868\n    ------------------------------\n    C求和结果为: 49999985000001\n    使用C求和开销时间为：0.043367624282836914\n    ```\n## 三、结语\n由上述可以看出来，同样使用for循环，但是使用c的效率是非常非常高的，所以针对一些特殊场景，使用c编写，然后用Python调用也是不错的方法。","source":"_posts/Python连接C实现高效编程demo.md","raw":"---\ntitle: Python连接C实现高效编程demo\ndate: 2020-05-31 08:54:12\ntags:\n---\n## 一、前言\n作为一门经典的编程语言，这些年来，C有着重要的地位，在各个领域的使用都是相当重要的地位！而Python作为较新式的语言，相对而言入门更加简单，适合新手来学习！但是作为一门动态的脚本语言，其效率相对C来说还是有些捉急的。在这里，我们引入一个demo来作为Python和C混合编程的一个基础。\n\n## 二、编写代码\n在这里我会使用对比的方式来比较两种语言计算一个较大数字求和时的耗时情况，从而直观体验其中的差别。同时这里会引入混合编程的概念。   \n1. 编写C的代码\n    ```\n    #include<stdio.h>\n\n    void add(long VALUE){\n        long sum = 0;\n        for (long i = 1;i < VALUE; i ++)\n            sum += i;\n        printf(\"C求和结果为: %ld\\n\", sum);\n    }\n    ```\n2. 编写Python代码\n    ```\n    import time\n\n    VALUE = 9999999\n\n    t1 = time.time()\n    sum = 0\n    for i in range(1, VALUE):\n        sum += i\n    print('for循环求和结果为：'+ str(sum))\n    t2 = time.time()\n    print('for循环求和开销时间为：'+ str(t2-t1))\n    ```\n3. 将之前的C代码编译成Python可以读取调用的文件\n    - gcc -fPIC -shared C的代码 -o 后续调用文件名.so   \n    例如: gcc -fPIC -shared sum.c -o csum.so\n4. 将csum.so加载到Python中，进行编写\n    - 导入库文件`from ctypes import cdll`\n    - 调用文件\n        ```\n        result = cdll.LoadLibrary(\"./csum.so\")\n        result.add(VALUE)\n        ```\n\n5. 最终Python代码sum.py是酱紫\n\n    ```\n    import time\n    from ctypes import cdll\n\n    VALUE = 9999999\n\n    # 使用Python求和\n    t1 = time.time()\n    sum = 0\n    for i in range(1, VALUE):\n        sum += i\n    print('for循环求和结果为：'+ str(sum))\n    t2 = time.time()\n    print('for循环求和开销时间为：'+ str(t2-t1))\n    print('-'*30)\n\n    # Python连接C求和\n    t1 = time.time()\n    result = cdll.LoadLibrary(\"./csum.so\")\n    result.add(VALUE)\n    t2 = time.time()\n    print('使用C求和开销时间为：'+ str(t2-t1))\n    ```\n6. 最终结果\n    ```\n    for循环求和结果为：49999985000001\n    for循环求和开销时间为：3.156290292739868\n    ------------------------------\n    C求和结果为: 49999985000001\n    使用C求和开销时间为：0.043367624282836914\n    ```\n## 三、结语\n由上述可以看出来，同样使用for循环，但是使用c的效率是非常非常高的，所以针对一些特殊场景，使用c编写，然后用Python调用也是不错的方法。","slug":"Python连接C实现高效编程demo","published":1,"updated":"2020-05-31T01:22:04.261Z","_id":"ckaucrn9h000056biakx6ec3p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>作为一门经典的编程语言，这些年来，C有着重要的地位，在各个领域的使用都是相当重要的地位！而Python作为较新式的语言，相对而言入门更加简单，适合新手来学习！但是作为一门动态的脚本语言，其效率相对C来说还是有些捉急的。在这里，我们引入一个demo来作为Python和C混合编程的一个基础。</p>\n<h2 id=\"二、编写代码\"><a href=\"#二、编写代码\" class=\"headerlink\" title=\"二、编写代码\"></a>二、编写代码</h2><p>在这里我会使用对比的方式来比较两种语言计算一个较大数字求和时的耗时情况，从而直观体验其中的差别。同时这里会引入混合编程的概念。   </p>\n<ol>\n<li><p>编写C的代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void add(long VALUE)&#123;</span><br><span class=\"line\">    long sum &#x3D; 0;</span><br><span class=\"line\">    for (long i &#x3D; 1;i &lt; VALUE; i ++)</span><br><span class=\"line\">        sum +&#x3D; i;</span><br><span class=\"line\">    printf(&quot;C求和结果为: %ld\\n&quot;, sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写Python代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">VALUE &#x3D; 9999999</span><br><span class=\"line\"></span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\">for i in range(1, VALUE):</span><br><span class=\"line\">    sum +&#x3D; i</span><br><span class=\"line\">print(&#39;for循环求和结果为：&#39;+ str(sum))</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;for循环求和开销时间为：&#39;+ str(t2-t1))</span><br></pre></td></tr></table></figure></li>\n<li><p>将之前的C代码编译成Python可以读取调用的文件</p>\n<ul>\n<li>gcc -fPIC -shared C的代码 -o 后续调用文件名.so<br>例如: gcc -fPIC -shared sum.c -o csum.so</li>\n</ul>\n</li>\n<li><p>将csum.so加载到Python中，进行编写</p>\n<ul>\n<li>导入库文件<code>from ctypes import cdll</code></li>\n<li>调用文件  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result &#x3D; cdll.LoadLibrary(&quot;.&#x2F;csum.so&quot;)</span><br><span class=\"line\">result.add(VALUE)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>最终Python代码sum.py是酱紫</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from ctypes import cdll</span><br><span class=\"line\"></span><br><span class=\"line\">VALUE &#x3D; 9999999</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用Python求和</span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\">for i in range(1, VALUE):</span><br><span class=\"line\">    sum +&#x3D; i</span><br><span class=\"line\">print(&#39;for循环求和结果为：&#39;+ str(sum))</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;for循环求和开销时间为：&#39;+ str(t2-t1))</span><br><span class=\"line\">print(&#39;-&#39;*30)</span><br><span class=\"line\"></span><br><span class=\"line\"># Python连接C求和</span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">result &#x3D; cdll.LoadLibrary(&quot;.&#x2F;csum.so&quot;)</span><br><span class=\"line\">result.add(VALUE)</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;使用C求和开销时间为：&#39;+ str(t2-t1))</span><br></pre></td></tr></table></figure></li>\n<li><p>最终结果</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for循环求和结果为：49999985000001</span><br><span class=\"line\">for循环求和开销时间为：3.156290292739868</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\">C求和结果为: 49999985000001</span><br><span class=\"line\">使用C求和开销时间为：0.043367624282836914</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、结语\"><a href=\"#三、结语\" class=\"headerlink\" title=\"三、结语\"></a>三、结语</h2><p>由上述可以看出来，同样使用for循环，但是使用c的效率是非常非常高的，所以针对一些特殊场景，使用c编写，然后用Python调用也是不错的方法。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>作为一门经典的编程语言，这些年来，C有着重要的地位，在各个领域的使用都是相当重要的地位！而Python作为较新式的语言，相对而言入门更加简单，适合新手来学习！但是作为一门动态的脚本语言，其效率相对C来说还是有些捉急的。在这里，我们引入一个demo来作为Python和C混合编程的一个基础。</p>\n<h2 id=\"二、编写代码\"><a href=\"#二、编写代码\" class=\"headerlink\" title=\"二、编写代码\"></a>二、编写代码</h2><p>在这里我会使用对比的方式来比较两种语言计算一个较大数字求和时的耗时情况，从而直观体验其中的差别。同时这里会引入混合编程的概念。   </p>\n<ol>\n<li><p>编写C的代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void add(long VALUE)&#123;</span><br><span class=\"line\">    long sum &#x3D; 0;</span><br><span class=\"line\">    for (long i &#x3D; 1;i &lt; VALUE; i ++)</span><br><span class=\"line\">        sum +&#x3D; i;</span><br><span class=\"line\">    printf(&quot;C求和结果为: %ld\\n&quot;, sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>编写Python代码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">VALUE &#x3D; 9999999</span><br><span class=\"line\"></span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\">for i in range(1, VALUE):</span><br><span class=\"line\">    sum +&#x3D; i</span><br><span class=\"line\">print(&#39;for循环求和结果为：&#39;+ str(sum))</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;for循环求和开销时间为：&#39;+ str(t2-t1))</span><br></pre></td></tr></table></figure></li>\n<li><p>将之前的C代码编译成Python可以读取调用的文件</p>\n<ul>\n<li>gcc -fPIC -shared C的代码 -o 后续调用文件名.so<br>例如: gcc -fPIC -shared sum.c -o csum.so</li>\n</ul>\n</li>\n<li><p>将csum.so加载到Python中，进行编写</p>\n<ul>\n<li>导入库文件<code>from ctypes import cdll</code></li>\n<li>调用文件  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result &#x3D; cdll.LoadLibrary(&quot;.&#x2F;csum.so&quot;)</span><br><span class=\"line\">result.add(VALUE)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>最终Python代码sum.py是酱紫</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from ctypes import cdll</span><br><span class=\"line\"></span><br><span class=\"line\">VALUE &#x3D; 9999999</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用Python求和</span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">sum &#x3D; 0</span><br><span class=\"line\">for i in range(1, VALUE):</span><br><span class=\"line\">    sum +&#x3D; i</span><br><span class=\"line\">print(&#39;for循环求和结果为：&#39;+ str(sum))</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;for循环求和开销时间为：&#39;+ str(t2-t1))</span><br><span class=\"line\">print(&#39;-&#39;*30)</span><br><span class=\"line\"></span><br><span class=\"line\"># Python连接C求和</span><br><span class=\"line\">t1 &#x3D; time.time()</span><br><span class=\"line\">result &#x3D; cdll.LoadLibrary(&quot;.&#x2F;csum.so&quot;)</span><br><span class=\"line\">result.add(VALUE)</span><br><span class=\"line\">t2 &#x3D; time.time()</span><br><span class=\"line\">print(&#39;使用C求和开销时间为：&#39;+ str(t2-t1))</span><br></pre></td></tr></table></figure></li>\n<li><p>最终结果</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for循环求和结果为：49999985000001</span><br><span class=\"line\">for循环求和开销时间为：3.156290292739868</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\">C求和结果为: 49999985000001</span><br><span class=\"line\">使用C求和开销时间为：0.043367624282836914</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、结语\"><a href=\"#三、结语\" class=\"headerlink\" title=\"三、结语\"></a>三、结语</h2><p>由上述可以看出来，同样使用for循环，但是使用c的效率是非常非常高的，所以针对一些特殊场景，使用c编写，然后用Python调用也是不错的方法。</p>\n</li>\n</ol>\n"},{"title":"Python装饰器的简单理解","date":"2020-06-01T07:46:14.000Z","_content":"## 装饰器\n&emsp;&emsp;通俗点理解就是锦上添花，关于这块需要参考一些软件开发的设计模式，在这里引入一个小的故事。   \n&emsp;&emsp;公司招了一个人A，某一天，项目组想要给一个接口添加一些时间计算，具体时间计算没有说，但是这个功能要加，A呢就去查看接口中的代码，在代码中添加了一个时间计算，过了两天，项目组要求所有接口全部添加时间计算，此时A则一个个的去每个接口中添加时间计算，以至于天天晚上加班，结果没过多久就被炒鱿鱼了。此时来了B，他先写了个时间计算函数并在每个接口头部添加这个函数名，实现了对应的加时间计算功能。没多久就升职加薪了。   \n&emsp;&emsp;看到这里，不禁会想，为什么呢？？？其实这里涉及到一个软件开发的设计模式-开闭原则（简单说就是功能可以加，代码修改是不允许的），A就明显犯了这个错误，\n而B则是使用到了我们接下来要说到的装饰器。\n## 引入\n&emsp;&emsp;在了解装饰器之前，请先了解闭包的相关概念！！以及高阶函数的概念！！\n这里我们有一个阶乘功能的函数\n```\ndef product(value):\n    # 实现阶乘功能\n    result = 1\n    while value > 0:\n        result *= value\n        value -= 1\n    print(result)\n```\n1. 我们需要添加一个计算运行时间的功能，请记住，不要改动product函数，直接做功能添加，这里使用装饰器处理。首先我们创建一个装饰器：\n    ```\n    import time\n\n    def count_time(func):\n        def call_func(var):\n            t1 = time.time()\n            func(var)\n            t2 = time.time()\n            print('消耗时间为：'+ str(t2-t1))\n        return call_func\n    ```\n2. 对原有函数进行装饰改造\n    ```\n    @count_time\n    def product(value):\n        # 实现阶乘功能\n        result = 1\n        while value > 0:\n            result *= value\n            value -= 1\n        print(result)\n    ```\n3. 细节理解   \n&emsp;&emsp;在第二步中的@count_time其实就是装饰器的基本使用，我们在使用product(100)时，解释器不会直接去调用product函数，而是实现调用count_time功能，并将返回的call_func返回给product，也就是说此时的product其实是指向call_func的，当执行product（100）时，其实是在向call_func传递参数，实现功能，简单理解可以使用以下两行代码来表示：\n    ```\n    product = count_time(product) # 此时的product是指向call_func函数的\n    product(100) # 相当于执行call_func(100)\n    ```\n## 更高一级的操作\n1. 原函数需要传递多个参数\n&emsp;&emsp;这里很好处理，很正常函数传递参数相同，我们在装饰器中最内层函数中需要传递的变量名改为`*args, **kwargs`，在执行时，将其直接传入即可。\n2. 原函数有返回值\n&emsp;&emsp;这里我们可以直接使用return将装饰器中最内层的执行函数部分return出去即可，比如：\n    ```\n    def count_time(func):\n        def call_func(var):\n            return func(var)\n        return call_func\n    ```\n3. 两个装饰器同时装饰同一个函数\n&emsp;&emsp;先看一下伪代码\n    ```\n    @装饰器1\n    @装饰器2\n    def fun():\n        pass\n    ```\n&emsp;&emsp;意思很简单，就是在原来函数基础上加两个新功能，但是关于执行顺序是怎么样的呢？\n&emsp;&emsp;就不买关子了，装饰器1先执行，但装饰器1最后装饰，其实这里和堆栈很相似，若是方便，可以自己编代码，打断点调试一下就知道了。\n## 结语\n未完待续...","source":"_posts/Python装饰器的简单理解.md","raw":"---\ntitle: Python装饰器的简单理解\ndate: 2020-06-01 15:46:14\ntags:\n---\n## 装饰器\n&emsp;&emsp;通俗点理解就是锦上添花，关于这块需要参考一些软件开发的设计模式，在这里引入一个小的故事。   \n&emsp;&emsp;公司招了一个人A，某一天，项目组想要给一个接口添加一些时间计算，具体时间计算没有说，但是这个功能要加，A呢就去查看接口中的代码，在代码中添加了一个时间计算，过了两天，项目组要求所有接口全部添加时间计算，此时A则一个个的去每个接口中添加时间计算，以至于天天晚上加班，结果没过多久就被炒鱿鱼了。此时来了B，他先写了个时间计算函数并在每个接口头部添加这个函数名，实现了对应的加时间计算功能。没多久就升职加薪了。   \n&emsp;&emsp;看到这里，不禁会想，为什么呢？？？其实这里涉及到一个软件开发的设计模式-开闭原则（简单说就是功能可以加，代码修改是不允许的），A就明显犯了这个错误，\n而B则是使用到了我们接下来要说到的装饰器。\n## 引入\n&emsp;&emsp;在了解装饰器之前，请先了解闭包的相关概念！！以及高阶函数的概念！！\n这里我们有一个阶乘功能的函数\n```\ndef product(value):\n    # 实现阶乘功能\n    result = 1\n    while value > 0:\n        result *= value\n        value -= 1\n    print(result)\n```\n1. 我们需要添加一个计算运行时间的功能，请记住，不要改动product函数，直接做功能添加，这里使用装饰器处理。首先我们创建一个装饰器：\n    ```\n    import time\n\n    def count_time(func):\n        def call_func(var):\n            t1 = time.time()\n            func(var)\n            t2 = time.time()\n            print('消耗时间为：'+ str(t2-t1))\n        return call_func\n    ```\n2. 对原有函数进行装饰改造\n    ```\n    @count_time\n    def product(value):\n        # 实现阶乘功能\n        result = 1\n        while value > 0:\n            result *= value\n            value -= 1\n        print(result)\n    ```\n3. 细节理解   \n&emsp;&emsp;在第二步中的@count_time其实就是装饰器的基本使用，我们在使用product(100)时，解释器不会直接去调用product函数，而是实现调用count_time功能，并将返回的call_func返回给product，也就是说此时的product其实是指向call_func的，当执行product（100）时，其实是在向call_func传递参数，实现功能，简单理解可以使用以下两行代码来表示：\n    ```\n    product = count_time(product) # 此时的product是指向call_func函数的\n    product(100) # 相当于执行call_func(100)\n    ```\n## 更高一级的操作\n1. 原函数需要传递多个参数\n&emsp;&emsp;这里很好处理，很正常函数传递参数相同，我们在装饰器中最内层函数中需要传递的变量名改为`*args, **kwargs`，在执行时，将其直接传入即可。\n2. 原函数有返回值\n&emsp;&emsp;这里我们可以直接使用return将装饰器中最内层的执行函数部分return出去即可，比如：\n    ```\n    def count_time(func):\n        def call_func(var):\n            return func(var)\n        return call_func\n    ```\n3. 两个装饰器同时装饰同一个函数\n&emsp;&emsp;先看一下伪代码\n    ```\n    @装饰器1\n    @装饰器2\n    def fun():\n        pass\n    ```\n&emsp;&emsp;意思很简单，就是在原来函数基础上加两个新功能，但是关于执行顺序是怎么样的呢？\n&emsp;&emsp;就不买关子了，装饰器1先执行，但装饰器1最后装饰，其实这里和堆栈很相似，若是方便，可以自己编代码，打断点调试一下就知道了。\n## 结语\n未完待续...","slug":"Python装饰器的简单理解","published":1,"updated":"2020-06-01T07:48:52.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw6zcnf00006ebie44x01oy","content":"<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><p>&emsp;&emsp;通俗点理解就是锦上添花，关于这块需要参考一些软件开发的设计模式，在这里引入一个小的故事。<br>&emsp;&emsp;公司招了一个人A，某一天，项目组想要给一个接口添加一些时间计算，具体时间计算没有说，但是这个功能要加，A呢就去查看接口中的代码，在代码中添加了一个时间计算，过了两天，项目组要求所有接口全部添加时间计算，此时A则一个个的去每个接口中添加时间计算，以至于天天晚上加班，结果没过多久就被炒鱿鱼了。此时来了B，他先写了个时间计算函数并在每个接口头部添加这个函数名，实现了对应的加时间计算功能。没多久就升职加薪了。<br>&emsp;&emsp;看到这里，不禁会想，为什么呢？？？其实这里涉及到一个软件开发的设计模式-开闭原则（简单说就是功能可以加，代码修改是不允许的），A就明显犯了这个错误，<br>而B则是使用到了我们接下来要说到的装饰器。</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>&emsp;&emsp;在了解装饰器之前，请先了解闭包的相关概念！！以及高阶函数的概念！！<br>这里我们有一个阶乘功能的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def product(value):</span><br><span class=\"line\">    # 实现阶乘功能</span><br><span class=\"line\">    result &#x3D; 1</span><br><span class=\"line\">    while value &gt; 0:</span><br><span class=\"line\">        result *&#x3D; value</span><br><span class=\"line\">        value -&#x3D; 1</span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>我们需要添加一个计算运行时间的功能，请记住，不要改动product函数，直接做功能添加，这里使用装饰器处理。首先我们创建一个装饰器： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def count_time(func):</span><br><span class=\"line\">    def call_func(var):</span><br><span class=\"line\">        t1 &#x3D; time.time()</span><br><span class=\"line\">        func(var)</span><br><span class=\"line\">        t2 &#x3D; time.time()</span><br><span class=\"line\">        print(&#39;消耗时间为：&#39;+ str(t2-t1))</span><br><span class=\"line\">    return call_func</span><br></pre></td></tr></table></figure></li>\n<li>对原有函数进行装饰改造 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@count_time</span><br><span class=\"line\">def product(value):</span><br><span class=\"line\">    # 实现阶乘功能</span><br><span class=\"line\">    result &#x3D; 1</span><br><span class=\"line\">    while value &gt; 0:</span><br><span class=\"line\">        result *&#x3D; value</span><br><span class=\"line\">        value -&#x3D; 1</span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure></li>\n<li>细节理解<br>&emsp;&emsp;在第二步中的@count_time其实就是装饰器的基本使用，我们在使用product(100)时，解释器不会直接去调用product函数，而是实现调用count_time功能，并将返回的call_func返回给product，也就是说此时的product其实是指向call_func的，当执行product（100）时，其实是在向call_func传递参数，实现功能，简单理解可以使用以下两行代码来表示： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product &#x3D; count_time(product) # 此时的product是指向call_func函数的</span><br><span class=\"line\">product(100) # 相当于执行call_func(100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"更高一级的操作\"><a href=\"#更高一级的操作\" class=\"headerlink\" title=\"更高一级的操作\"></a>更高一级的操作</h2></li>\n<li>原函数需要传递多个参数<br>&emsp;&emsp;这里很好处理，很正常函数传递参数相同，我们在装饰器中最内层函数中需要传递的变量名改为<code>*args, **kwargs</code>，在执行时，将其直接传入即可。</li>\n<li>原函数有返回值<br>&emsp;&emsp;这里我们可以直接使用return将装饰器中最内层的执行函数部分return出去即可，比如： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def count_time(func):</span><br><span class=\"line\">    def call_func(var):</span><br><span class=\"line\">        return func(var)</span><br><span class=\"line\">    return call_func</span><br></pre></td></tr></table></figure></li>\n<li>两个装饰器同时装饰同一个函数<br>&emsp;&emsp;先看一下伪代码 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@装饰器1</span><br><span class=\"line\">@装饰器2</span><br><span class=\"line\">def fun():</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n&emsp;&emsp;意思很简单，就是在原来函数基础上加两个新功能，但是关于执行顺序是怎么样的呢？<br>&emsp;&emsp;就不买关子了，装饰器1先执行，但装饰器1最后装饰，其实这里和堆栈很相似，若是方便，可以自己编代码，打断点调试一下就知道了。<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>未完待续…</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><p>&emsp;&emsp;通俗点理解就是锦上添花，关于这块需要参考一些软件开发的设计模式，在这里引入一个小的故事。<br>&emsp;&emsp;公司招了一个人A，某一天，项目组想要给一个接口添加一些时间计算，具体时间计算没有说，但是这个功能要加，A呢就去查看接口中的代码，在代码中添加了一个时间计算，过了两天，项目组要求所有接口全部添加时间计算，此时A则一个个的去每个接口中添加时间计算，以至于天天晚上加班，结果没过多久就被炒鱿鱼了。此时来了B，他先写了个时间计算函数并在每个接口头部添加这个函数名，实现了对应的加时间计算功能。没多久就升职加薪了。<br>&emsp;&emsp;看到这里，不禁会想，为什么呢？？？其实这里涉及到一个软件开发的设计模式-开闭原则（简单说就是功能可以加，代码修改是不允许的），A就明显犯了这个错误，<br>而B则是使用到了我们接下来要说到的装饰器。</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>&emsp;&emsp;在了解装饰器之前，请先了解闭包的相关概念！！以及高阶函数的概念！！<br>这里我们有一个阶乘功能的函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def product(value):</span><br><span class=\"line\">    # 实现阶乘功能</span><br><span class=\"line\">    result &#x3D; 1</span><br><span class=\"line\">    while value &gt; 0:</span><br><span class=\"line\">        result *&#x3D; value</span><br><span class=\"line\">        value -&#x3D; 1</span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>我们需要添加一个计算运行时间的功能，请记住，不要改动product函数，直接做功能添加，这里使用装饰器处理。首先我们创建一个装饰器： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def count_time(func):</span><br><span class=\"line\">    def call_func(var):</span><br><span class=\"line\">        t1 &#x3D; time.time()</span><br><span class=\"line\">        func(var)</span><br><span class=\"line\">        t2 &#x3D; time.time()</span><br><span class=\"line\">        print(&#39;消耗时间为：&#39;+ str(t2-t1))</span><br><span class=\"line\">    return call_func</span><br></pre></td></tr></table></figure></li>\n<li>对原有函数进行装饰改造 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@count_time</span><br><span class=\"line\">def product(value):</span><br><span class=\"line\">    # 实现阶乘功能</span><br><span class=\"line\">    result &#x3D; 1</span><br><span class=\"line\">    while value &gt; 0:</span><br><span class=\"line\">        result *&#x3D; value</span><br><span class=\"line\">        value -&#x3D; 1</span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure></li>\n<li>细节理解<br>&emsp;&emsp;在第二步中的@count_time其实就是装饰器的基本使用，我们在使用product(100)时，解释器不会直接去调用product函数，而是实现调用count_time功能，并将返回的call_func返回给product，也就是说此时的product其实是指向call_func的，当执行product（100）时，其实是在向call_func传递参数，实现功能，简单理解可以使用以下两行代码来表示： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product &#x3D; count_time(product) # 此时的product是指向call_func函数的</span><br><span class=\"line\">product(100) # 相当于执行call_func(100)</span><br></pre></td></tr></table></figure>\n<h2 id=\"更高一级的操作\"><a href=\"#更高一级的操作\" class=\"headerlink\" title=\"更高一级的操作\"></a>更高一级的操作</h2></li>\n<li>原函数需要传递多个参数<br>&emsp;&emsp;这里很好处理，很正常函数传递参数相同，我们在装饰器中最内层函数中需要传递的变量名改为<code>*args, **kwargs</code>，在执行时，将其直接传入即可。</li>\n<li>原函数有返回值<br>&emsp;&emsp;这里我们可以直接使用return将装饰器中最内层的执行函数部分return出去即可，比如： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def count_time(func):</span><br><span class=\"line\">    def call_func(var):</span><br><span class=\"line\">        return func(var)</span><br><span class=\"line\">    return call_func</span><br></pre></td></tr></table></figure></li>\n<li>两个装饰器同时装饰同一个函数<br>&emsp;&emsp;先看一下伪代码 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@装饰器1</span><br><span class=\"line\">@装饰器2</span><br><span class=\"line\">def fun():</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n&emsp;&emsp;意思很简单，就是在原来函数基础上加两个新功能，但是关于执行顺序是怎么样的呢？<br>&emsp;&emsp;就不买关子了，装饰器1先执行，但装饰器1最后装饰，其实这里和堆栈很相似，若是方便，可以自己编代码，打断点调试一下就知道了。<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>未完待续…</li>\n</ol>\n"},{"title":"闭包的简要介绍","date":"2020-06-01T05:23:17.000Z","_content":"## 闭包\n   - 是内层函数对外层函数非全局变量的应用\n   - 闭包会一直存在计算机内存中，不会因为函数执行的结束而释放\n\n## 举例说明\n&emsp;&emsp;这里我们做一个求和函数，但是我们需要做到每次求和后也返回一个平均值及对应个数\n```\ndef make_averager():\n    count = 0\n    total = 0\n\n    def fun(var):\n        # nonlocal count, total # 这里不加会报错\n        count += 1\n        total += var\n        print(total)\n        print(str(total/count) + ' , ' + str(count))\n    return fun\n\n\nif __name__ == \"__main__\":\n    # 这里用到了高阶函数的定义，简单说就是可以将函数的返回值存储在变量中使用\n    average = make_averager()\n    average(5)\n    average(6)\n    average(7)\n```\n&emsp;&emsp;很糟糕，这里会有一个报错UnboundLocalError: local variable 'count' referenced before assignment，关于这里其实和变量的使用范围有关，在fun函数内部使用关键字nonlocal添加nonlocal count, total即可解决。   \n&emsp;&emsp;nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量。   \n&emsp;&emsp;简单来说就是在修改函数外部的变量，需要使用global；但是在闭包中，修改外层函数中的变量则需要时使用到nonlocal。","source":"_posts/Python闭包的简要介绍.md","raw":"---\ntitle: 闭包的简要介绍\ndate: 2020-06-01 13:23:17\ntags:\n---\n## 闭包\n   - 是内层函数对外层函数非全局变量的应用\n   - 闭包会一直存在计算机内存中，不会因为函数执行的结束而释放\n\n## 举例说明\n&emsp;&emsp;这里我们做一个求和函数，但是我们需要做到每次求和后也返回一个平均值及对应个数\n```\ndef make_averager():\n    count = 0\n    total = 0\n\n    def fun(var):\n        # nonlocal count, total # 这里不加会报错\n        count += 1\n        total += var\n        print(total)\n        print(str(total/count) + ' , ' + str(count))\n    return fun\n\n\nif __name__ == \"__main__\":\n    # 这里用到了高阶函数的定义，简单说就是可以将函数的返回值存储在变量中使用\n    average = make_averager()\n    average(5)\n    average(6)\n    average(7)\n```\n&emsp;&emsp;很糟糕，这里会有一个报错UnboundLocalError: local variable 'count' referenced before assignment，关于这里其实和变量的使用范围有关，在fun函数内部使用关键字nonlocal添加nonlocal count, total即可解决。   \n&emsp;&emsp;nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量。   \n&emsp;&emsp;简单来说就是在修改函数外部的变量，需要使用global；但是在闭包中，修改外层函数中的变量则需要时使用到nonlocal。","slug":"Python闭包的简要介绍","published":1,"updated":"2020-06-01T07:46:33.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaw6zco000016ebia2q21oxq","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>是内层函数对外层函数非全局变量的应用</li>\n<li>闭包会一直存在计算机内存中，不会因为函数执行的结束而释放</li>\n</ul>\n<h2 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h2><p>&emsp;&emsp;这里我们做一个求和函数，但是我们需要做到每次求和后也返回一个平均值及对应个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def make_averager():</span><br><span class=\"line\">    count &#x3D; 0</span><br><span class=\"line\">    total &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def fun(var):</span><br><span class=\"line\">        # nonlocal count, total # 这里不加会报错</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">        total +&#x3D; var</span><br><span class=\"line\">        print(total)</span><br><span class=\"line\">        print(str(total&#x2F;count) + &#39; , &#39; + str(count))</span><br><span class=\"line\">    return fun</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    # 这里用到了高阶函数的定义，简单说就是可以将函数的返回值存储在变量中使用</span><br><span class=\"line\">    average &#x3D; make_averager()</span><br><span class=\"line\">    average(5)</span><br><span class=\"line\">    average(6)</span><br><span class=\"line\">    average(7)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;很糟糕，这里会有一个报错UnboundLocalError: local variable ‘count’ referenced before assignment，关于这里其实和变量的使用范围有关，在fun函数内部使用关键字nonlocal添加nonlocal count, total即可解决。<br>&emsp;&emsp;nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量。<br>&emsp;&emsp;简单来说就是在修改函数外部的变量，需要使用global；但是在闭包中，修改外层函数中的变量则需要时使用到nonlocal。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>是内层函数对外层函数非全局变量的应用</li>\n<li>闭包会一直存在计算机内存中，不会因为函数执行的结束而释放</li>\n</ul>\n<h2 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h2><p>&emsp;&emsp;这里我们做一个求和函数，但是我们需要做到每次求和后也返回一个平均值及对应个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def make_averager():</span><br><span class=\"line\">    count &#x3D; 0</span><br><span class=\"line\">    total &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def fun(var):</span><br><span class=\"line\">        # nonlocal count, total # 这里不加会报错</span><br><span class=\"line\">        count +&#x3D; 1</span><br><span class=\"line\">        total +&#x3D; var</span><br><span class=\"line\">        print(total)</span><br><span class=\"line\">        print(str(total&#x2F;count) + &#39; , &#39; + str(count))</span><br><span class=\"line\">    return fun</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    # 这里用到了高阶函数的定义，简单说就是可以将函数的返回值存储在变量中使用</span><br><span class=\"line\">    average &#x3D; make_averager()</span><br><span class=\"line\">    average(5)</span><br><span class=\"line\">    average(6)</span><br><span class=\"line\">    average(7)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;很糟糕，这里会有一个报错UnboundLocalError: local variable ‘count’ referenced before assignment，关于这里其实和变量的使用范围有关，在fun函数内部使用关键字nonlocal添加nonlocal count, total即可解决。<br>&emsp;&emsp;nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量。<br>&emsp;&emsp;简单来说就是在修改函数外部的变量，需要使用global；但是在闭包中，修改外层函数中的变量则需要时使用到nonlocal。</p>\n"},{"title":"Python迭代器及生成器的简单理解","date":"2020-06-02T00:36:31.000Z","_content":"## 迭代器\n&emsp;&emsp;在使用列表时，直接将数据存入列表将会占据大量空间，且复用率较低，\n为解决这个问题，这里了解一下迭代器，从而创建一种数据产生的方式，以此来节省空间。\n## 迭代对象\n&emsp;&emsp;注意，这里需要使用到内建函数__iter__，简单理解为，使用了__iter__才会是一个可迭代对象，关于这部分，我们可以对一些对象做一些判断，从而清楚是不是可迭代对象，比如L1列表：\n```\nfrom collections.abc import Iterable\n# 判断L1是否为可迭代对象\nL1 = [i for i in range(4)]\nprint(isinstance(L1, Iterable)) # 结果为True，确定为迭代对象\n```\n&emsp;&emsp;这里我们使用__iter__()方法和__next__()方法来将元素取出。\n```\nL2 = L1.__iter__()\n# L2 = iter(L1) # 和上面一句等价\nprint(next(L2))\nprint(L2.__next__()) # 和上面一句等价\nprint(next(L2))\n```\n&emsp;&emsp;在这里我们实现了使用for循环来取出元素的方法，在了解这里之后，我们开始做一个自己的迭代器\n```\n# 构造迭代器\nclass NewIter():\n    # 用于生成斐波那契数列\n    def __init__(self, num):\n        self.num = num\n        self.a = 0\n        self.b = 1\n\n    def __iter__(self):\n        # 创建可迭代对象\n        return self\n    \n    def __next__(self):\n        while self.num > 0:\n            result = self.a\n            self.a, self.b = self.b, self.a + self.b\n            self.num -= 1\n            return result\n        # 循环结束后跳出\n        raise StopIteration\n        \nnew_iter = NewIter(5)\nprint(next(new_iter))\nprint(next(new_iter))\n```\n## 生成器\n&emsp;&emsp;这里引入生成器个概念，生成器能做到迭代器能做的所有事，由于自动创建了iter()和next()方法，生成器显得特别简洁。除了创建和保存程序状态的自动方法,当\n发生器终结时,还会自动抛出 StopIteration 异常。简单理解他就是迭代器的一种！！使用yield即可实现。\n```\n# 生成器实现\ndef new_create(num):\n    # 用于生成斐波那契数列\n    a, b = 0, 1\n    while num > 0:\n        yield a\n        a, b = b, a+b\n        num -= 1\n        \nnew_iter = new_create(5)\nprint(next(new_iter))\nprint(next(new_iter))\n```\n## 结语\n&emsp;&emsp;目的就是节省空间，提高复用率","source":"_posts/Python迭代器及生成器的简单理解.md","raw":"---\ntitle: Python迭代器及生成器的简单理解\ndate: 2020-06-02 08:36:31\ntags:\n---\n## 迭代器\n&emsp;&emsp;在使用列表时，直接将数据存入列表将会占据大量空间，且复用率较低，\n为解决这个问题，这里了解一下迭代器，从而创建一种数据产生的方式，以此来节省空间。\n## 迭代对象\n&emsp;&emsp;注意，这里需要使用到内建函数__iter__，简单理解为，使用了__iter__才会是一个可迭代对象，关于这部分，我们可以对一些对象做一些判断，从而清楚是不是可迭代对象，比如L1列表：\n```\nfrom collections.abc import Iterable\n# 判断L1是否为可迭代对象\nL1 = [i for i in range(4)]\nprint(isinstance(L1, Iterable)) # 结果为True，确定为迭代对象\n```\n&emsp;&emsp;这里我们使用__iter__()方法和__next__()方法来将元素取出。\n```\nL2 = L1.__iter__()\n# L2 = iter(L1) # 和上面一句等价\nprint(next(L2))\nprint(L2.__next__()) # 和上面一句等价\nprint(next(L2))\n```\n&emsp;&emsp;在这里我们实现了使用for循环来取出元素的方法，在了解这里之后，我们开始做一个自己的迭代器\n```\n# 构造迭代器\nclass NewIter():\n    # 用于生成斐波那契数列\n    def __init__(self, num):\n        self.num = num\n        self.a = 0\n        self.b = 1\n\n    def __iter__(self):\n        # 创建可迭代对象\n        return self\n    \n    def __next__(self):\n        while self.num > 0:\n            result = self.a\n            self.a, self.b = self.b, self.a + self.b\n            self.num -= 1\n            return result\n        # 循环结束后跳出\n        raise StopIteration\n        \nnew_iter = NewIter(5)\nprint(next(new_iter))\nprint(next(new_iter))\n```\n## 生成器\n&emsp;&emsp;这里引入生成器个概念，生成器能做到迭代器能做的所有事，由于自动创建了iter()和next()方法，生成器显得特别简洁。除了创建和保存程序状态的自动方法,当\n发生器终结时,还会自动抛出 StopIteration 异常。简单理解他就是迭代器的一种！！使用yield即可实现。\n```\n# 生成器实现\ndef new_create(num):\n    # 用于生成斐波那契数列\n    a, b = 0, 1\n    while num > 0:\n        yield a\n        a, b = b, a+b\n        num -= 1\n        \nnew_iter = new_create(5)\nprint(next(new_iter))\nprint(next(new_iter))\n```\n## 结语\n&emsp;&emsp;目的就是节省空间，提高复用率","slug":"Python迭代器及生成器的简单理解","published":1,"updated":"2020-06-02T00:39:04.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckax72g0g00006bbib25q14dw","content":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>&emsp;&emsp;在使用列表时，直接将数据存入列表将会占据大量空间，且复用率较低，<br>为解决这个问题，这里了解一下迭代器，从而创建一种数据产生的方式，以此来节省空间。</p>\n<h2 id=\"迭代对象\"><a href=\"#迭代对象\" class=\"headerlink\" title=\"迭代对象\"></a>迭代对象</h2><p>&emsp;&emsp;注意，这里需要使用到内建函数<strong>iter</strong>，简单理解为，使用了<strong>iter</strong>才会是一个可迭代对象，关于这部分，我们可以对一些对象做一些判断，从而清楚是不是可迭代对象，比如L1列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterable</span><br><span class=\"line\"># 判断L1是否为可迭代对象</span><br><span class=\"line\">L1 &#x3D; [i for i in range(4)]</span><br><span class=\"line\">print(isinstance(L1, Iterable)) # 结果为True，确定为迭代对象</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这里我们使用<strong>iter</strong>()方法和<strong>next</strong>()方法来将元素取出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L2 &#x3D; L1.__iter__()</span><br><span class=\"line\"># L2 &#x3D; iter(L1) # 和上面一句等价</span><br><span class=\"line\">print(next(L2))</span><br><span class=\"line\">print(L2.__next__()) # 和上面一句等价</span><br><span class=\"line\">print(next(L2))</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在这里我们实现了使用for循环来取出元素的方法，在了解这里之后，我们开始做一个自己的迭代器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构造迭代器</span><br><span class=\"line\">class NewIter():</span><br><span class=\"line\">    # 用于生成斐波那契数列</span><br><span class=\"line\">    def __init__(self, num):</span><br><span class=\"line\">        self.num &#x3D; num</span><br><span class=\"line\">        self.a &#x3D; 0</span><br><span class=\"line\">        self.b &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        # 创建可迭代对象</span><br><span class=\"line\">        return self</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        while self.num &gt; 0:</span><br><span class=\"line\">            result &#x3D; self.a</span><br><span class=\"line\">            self.a, self.b &#x3D; self.b, self.a + self.b</span><br><span class=\"line\">            self.num -&#x3D; 1</span><br><span class=\"line\">            return result</span><br><span class=\"line\">        # 循环结束后跳出</span><br><span class=\"line\">        raise StopIteration</span><br><span class=\"line\">        </span><br><span class=\"line\">new_iter &#x3D; NewIter(5)</span><br><span class=\"line\">print(next(new_iter))</span><br><span class=\"line\">print(next(new_iter))</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>&emsp;&emsp;这里引入生成器个概念，生成器能做到迭代器能做的所有事，由于自动创建了iter()和next()方法，生成器显得特别简洁。除了创建和保存程序状态的自动方法,当<br>发生器终结时,还会自动抛出 StopIteration 异常。简单理解他就是迭代器的一种！！使用yield即可实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成器实现</span><br><span class=\"line\">def new_create(num):</span><br><span class=\"line\">    # 用于生成斐波那契数列</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    while num &gt; 0:</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        num -&#x3D; 1</span><br><span class=\"line\">        </span><br><span class=\"line\">new_iter &#x3D; new_create(5)</span><br><span class=\"line\">print(next(new_iter))</span><br><span class=\"line\">print(next(new_iter))</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;目的就是节省空间，提高复用率</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>&emsp;&emsp;在使用列表时，直接将数据存入列表将会占据大量空间，且复用率较低，<br>为解决这个问题，这里了解一下迭代器，从而创建一种数据产生的方式，以此来节省空间。</p>\n<h2 id=\"迭代对象\"><a href=\"#迭代对象\" class=\"headerlink\" title=\"迭代对象\"></a>迭代对象</h2><p>&emsp;&emsp;注意，这里需要使用到内建函数<strong>iter</strong>，简单理解为，使用了<strong>iter</strong>才会是一个可迭代对象，关于这部分，我们可以对一些对象做一些判断，从而清楚是不是可迭代对象，比如L1列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections.abc import Iterable</span><br><span class=\"line\"># 判断L1是否为可迭代对象</span><br><span class=\"line\">L1 &#x3D; [i for i in range(4)]</span><br><span class=\"line\">print(isinstance(L1, Iterable)) # 结果为True，确定为迭代对象</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这里我们使用<strong>iter</strong>()方法和<strong>next</strong>()方法来将元素取出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L2 &#x3D; L1.__iter__()</span><br><span class=\"line\"># L2 &#x3D; iter(L1) # 和上面一句等价</span><br><span class=\"line\">print(next(L2))</span><br><span class=\"line\">print(L2.__next__()) # 和上面一句等价</span><br><span class=\"line\">print(next(L2))</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在这里我们实现了使用for循环来取出元素的方法，在了解这里之后，我们开始做一个自己的迭代器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 构造迭代器</span><br><span class=\"line\">class NewIter():</span><br><span class=\"line\">    # 用于生成斐波那契数列</span><br><span class=\"line\">    def __init__(self, num):</span><br><span class=\"line\">        self.num &#x3D; num</span><br><span class=\"line\">        self.a &#x3D; 0</span><br><span class=\"line\">        self.b &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        # 创建可迭代对象</span><br><span class=\"line\">        return self</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        while self.num &gt; 0:</span><br><span class=\"line\">            result &#x3D; self.a</span><br><span class=\"line\">            self.a, self.b &#x3D; self.b, self.a + self.b</span><br><span class=\"line\">            self.num -&#x3D; 1</span><br><span class=\"line\">            return result</span><br><span class=\"line\">        # 循环结束后跳出</span><br><span class=\"line\">        raise StopIteration</span><br><span class=\"line\">        </span><br><span class=\"line\">new_iter &#x3D; NewIter(5)</span><br><span class=\"line\">print(next(new_iter))</span><br><span class=\"line\">print(next(new_iter))</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>&emsp;&emsp;这里引入生成器个概念，生成器能做到迭代器能做的所有事，由于自动创建了iter()和next()方法，生成器显得特别简洁。除了创建和保存程序状态的自动方法,当<br>发生器终结时,还会自动抛出 StopIteration 异常。简单理解他就是迭代器的一种！！使用yield即可实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成器实现</span><br><span class=\"line\">def new_create(num):</span><br><span class=\"line\">    # 用于生成斐波那契数列</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    while num &gt; 0:</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        num -&#x3D; 1</span><br><span class=\"line\">        </span><br><span class=\"line\">new_iter &#x3D; new_create(5)</span><br><span class=\"line\">print(next(new_iter))</span><br><span class=\"line\">print(next(new_iter))</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&emsp;&emsp;目的就是节省空间，提高复用率</p>\n"},{"title":"Python第三方库numpy的简单入门使用","date":"2020-06-07T07:08:45.000Z","_content":"首先，我们需要导入包文件\n```python\nimport numpy as np\n```\n\n## 一、numpy中的一般语法\n\n\n```python\n# 矩阵的逆、转置及秩\ndata_1 = np.matrix('3 4 5;7 8 9')\nprint(data_1)\nprint(\"矩阵的逆:\")\ndata_2 = data_1.I\nprint(data_2)\nprint(\"矩阵的转置:\")\ndata_3 = data_1.T\nprint(data_3)\nprint(\"矩阵的秩:\")\ndata_4 = np.linalg.matrix_rank(data_1)\nprint(data_4)\n```\n\n    [[3 4 5]\n     [7 8 9]]\n    矩阵的逆:\n    [[-1.08333333  0.58333333]\n     [-0.08333333  0.08333333]\n     [ 0.91666667 -0.41666667]]\n    矩阵的转置:\n    [[3 7]\n     [4 8]\n     [5 9]]\n    矩阵的秩:\n    2\n    \n\n\n```python\n# 矩阵的维度（也称为轴数）\nprint(data_1.ndim)\n```\n\n    2\n    \n\n## 二、数组的创建\n   1. 创建二维数组\n        这里强调：使用matrix只能创建二维矩阵，而是用非matrix方法可以创建高维矩阵\n\n\n```python\n# 全0的矩阵\narr_1 = np.matrix(np.zeros((3, 3)))\nprint(arr_1)\n# 或者\narr_1 = np.zeros((3, 3))\nprint(arr_1)\n```\n\n    [[0. 0. 0.]\n     [0. 0. 0.]\n     [0. 0. 0.]]\n    [[0. 0. 0.]\n     [0. 0. 0.]\n     [0. 0. 0.]]\n    \n\n\n```python\n# 全1的矩阵\narr_2 = np.matrix(np.ones((3, 3)))\nprint(arr_2)\n# 或者\narr_2 = np.ones((3, 3))\nprint(arr_2)\n```\n\n    [[1. 1. 1.]\n     [1. 1. 1.]\n     [1. 1. 1.]]\n    [[1. 1. 1.]\n     [1. 1. 1.]\n     [1. 1. 1.]]\n    \n\n\n```python\n# 创建随机矩阵\narr_3 = np.matrix(np.random.rand(3, 4))\narr_3\n```\n\n\n\n\n    matrix([[0.48890396, 0.09218043, 0.38339213, 0.61843015],\n            [0.35092127, 0.08485116, 0.84651857, 0.4481831 ],\n            [0.88727766, 0.56471182, 0.49473952, 0.69027512]])\n\n\n\n\n```python\n# 创建整数随机矩阵\narr_4 = np.matrix(np.random.randint(5, 10, size=(3, 4)))\narr_4\n```\n\n\n\n\n    matrix([[7, 7, 7, 5],\n            [6, 5, 8, 5],\n            [5, 6, 7, 6]])\n\n\n\n\n```python\n# 创建对角矩阵\nnew_list = [i for i in range(3, 7)]\narr_5 = np.matrix(np.diag(new_list))\narr_5\n```\n\n\n\n\n    matrix([[3, 0, 0, 0],\n            [0, 4, 0, 0],\n            [0, 0, 5, 0],\n            [0, 0, 0, 6]])\n\n\n\n\n```python\n# 创建单位矩阵\narr_6 = np.eye(3)\narr_6\n```\n\n\n\n\n    array([[1., 0., 0.],\n           [0., 1., 0.],\n           [0., 0., 1.]])\n\n\n\n\n```python\n# 改变矩阵的形状\nprint(arr_4)\narr_7 = arr_4.reshape(4, 3)\narr_7\n```\n\n    [[7 7 7 5]\n     [6 5 8 5]\n     [5 6 7 6]]\n    \n\n\n\n\n    matrix([[7, 7, 7],\n            [5, 6, 5],\n            [8, 5, 5],\n            [6, 7, 6]])\n\n\n\n   2. 高维数组\n\n\n```python\n# 例如创建3维的数组\narr_8 = np.arange(24).reshape(2, 3, 4)\nprint(arr_8)\nprint(\"数组维度：\"+str(arr_8.ndim))\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    数组维度：3\n    \n\n## 三、numpy的索引和切片\n\n\n```python\nprint(arr_8)\nprint(\"单独获取到一个值\")\nprint(arr_8[0,0,3])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    单独获取到一个值\n    3\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的所有值\")\nprint(arr_8[0,:,:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的所有值\n    [[ 0  1  2  3]\n     [ 4  5  6  7]\n     [ 8  9 10 11]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行的值\")\nprint(arr_8[0,:2,:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行的值\n    [[0 1 2 3]\n     [4 5 6 7]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行后两列的值\")\nprint(arr_8[0,:2,-2:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行后两列的值\n    [[2 3]\n     [6 7]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行后两列的值并替换为-2\")\nprint(\"获取到深度为0的前两行后两列的值\")\nprint(arr_8[0,:2,-2:])\nprint(\"替换为-2\")\narr_8[0,:2,-2:] = -2\nprint(\"原来数组\")\nprint(arr_8)\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行后两列的值并替换为-2\n    获取到深度为0的前两行后两列的值\n    [[2 3]\n     [6 7]]\n    替换为-2\n    原来数组\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n ## 四、numpy的合并功能\n     1. 在第一轴合并\n     2. 在第二轴合并\n     3. 在第三轴合并\n     4. 在任意轴合并\n\n\n```python\n# 1. 在第一轴合并\n# vstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.vstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]\n    \n     [[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n\n```python\n# 2. 在第二轴合并\n# hstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.hstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]\n      [ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]\n      [12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n\n```python\n# 3. 在第三轴合并\n# dstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.dstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2  0  1 -2 -2]\n      [ 4  5 -2 -2  4  5 -2 -2]\n      [ 8  9 10 11  8  9 10 11]]\n    \n     [[12 13 14 15 12 13 14 15]\n      [16 17 18 19 16 17 18 19]\n      [20 21 22 23 20 21 22 23]]]\n    \n\n\n```python\n# 4. 任意轴合并\n# concatenate\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\n# axis表示设置在何处轴合并，默认在第一轴\ntemp = np.concatenate((arr_8, arr_8), axis=2)\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2  0  1 -2 -2]\n      [ 4  5 -2 -2  4  5 -2 -2]\n      [ 8  9 10 11  8  9 10 11]]\n    \n     [[12 13 14 15 12 13 14 15]\n      [16 17 18 19 16 17 18 19]\n      [20 21 22 23 20 21 22 23]]]\n    \n","source":"_posts/Python第三方库numpy的简单入门使用.md","raw":"---\ntitle: Python第三方库numpy的简单入门使用\ndate: 2020-06-07 15:08:45\ntags:\n---\n首先，我们需要导入包文件\n```python\nimport numpy as np\n```\n\n## 一、numpy中的一般语法\n\n\n```python\n# 矩阵的逆、转置及秩\ndata_1 = np.matrix('3 4 5;7 8 9')\nprint(data_1)\nprint(\"矩阵的逆:\")\ndata_2 = data_1.I\nprint(data_2)\nprint(\"矩阵的转置:\")\ndata_3 = data_1.T\nprint(data_3)\nprint(\"矩阵的秩:\")\ndata_4 = np.linalg.matrix_rank(data_1)\nprint(data_4)\n```\n\n    [[3 4 5]\n     [7 8 9]]\n    矩阵的逆:\n    [[-1.08333333  0.58333333]\n     [-0.08333333  0.08333333]\n     [ 0.91666667 -0.41666667]]\n    矩阵的转置:\n    [[3 7]\n     [4 8]\n     [5 9]]\n    矩阵的秩:\n    2\n    \n\n\n```python\n# 矩阵的维度（也称为轴数）\nprint(data_1.ndim)\n```\n\n    2\n    \n\n## 二、数组的创建\n   1. 创建二维数组\n        这里强调：使用matrix只能创建二维矩阵，而是用非matrix方法可以创建高维矩阵\n\n\n```python\n# 全0的矩阵\narr_1 = np.matrix(np.zeros((3, 3)))\nprint(arr_1)\n# 或者\narr_1 = np.zeros((3, 3))\nprint(arr_1)\n```\n\n    [[0. 0. 0.]\n     [0. 0. 0.]\n     [0. 0. 0.]]\n    [[0. 0. 0.]\n     [0. 0. 0.]\n     [0. 0. 0.]]\n    \n\n\n```python\n# 全1的矩阵\narr_2 = np.matrix(np.ones((3, 3)))\nprint(arr_2)\n# 或者\narr_2 = np.ones((3, 3))\nprint(arr_2)\n```\n\n    [[1. 1. 1.]\n     [1. 1. 1.]\n     [1. 1. 1.]]\n    [[1. 1. 1.]\n     [1. 1. 1.]\n     [1. 1. 1.]]\n    \n\n\n```python\n# 创建随机矩阵\narr_3 = np.matrix(np.random.rand(3, 4))\narr_3\n```\n\n\n\n\n    matrix([[0.48890396, 0.09218043, 0.38339213, 0.61843015],\n            [0.35092127, 0.08485116, 0.84651857, 0.4481831 ],\n            [0.88727766, 0.56471182, 0.49473952, 0.69027512]])\n\n\n\n\n```python\n# 创建整数随机矩阵\narr_4 = np.matrix(np.random.randint(5, 10, size=(3, 4)))\narr_4\n```\n\n\n\n\n    matrix([[7, 7, 7, 5],\n            [6, 5, 8, 5],\n            [5, 6, 7, 6]])\n\n\n\n\n```python\n# 创建对角矩阵\nnew_list = [i for i in range(3, 7)]\narr_5 = np.matrix(np.diag(new_list))\narr_5\n```\n\n\n\n\n    matrix([[3, 0, 0, 0],\n            [0, 4, 0, 0],\n            [0, 0, 5, 0],\n            [0, 0, 0, 6]])\n\n\n\n\n```python\n# 创建单位矩阵\narr_6 = np.eye(3)\narr_6\n```\n\n\n\n\n    array([[1., 0., 0.],\n           [0., 1., 0.],\n           [0., 0., 1.]])\n\n\n\n\n```python\n# 改变矩阵的形状\nprint(arr_4)\narr_7 = arr_4.reshape(4, 3)\narr_7\n```\n\n    [[7 7 7 5]\n     [6 5 8 5]\n     [5 6 7 6]]\n    \n\n\n\n\n    matrix([[7, 7, 7],\n            [5, 6, 5],\n            [8, 5, 5],\n            [6, 7, 6]])\n\n\n\n   2. 高维数组\n\n\n```python\n# 例如创建3维的数组\narr_8 = np.arange(24).reshape(2, 3, 4)\nprint(arr_8)\nprint(\"数组维度：\"+str(arr_8.ndim))\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    数组维度：3\n    \n\n## 三、numpy的索引和切片\n\n\n```python\nprint(arr_8)\nprint(\"单独获取到一个值\")\nprint(arr_8[0,0,3])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    单独获取到一个值\n    3\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的所有值\")\nprint(arr_8[0,:,:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的所有值\n    [[ 0  1  2  3]\n     [ 4  5  6  7]\n     [ 8  9 10 11]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行的值\")\nprint(arr_8[0,:2,:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行的值\n    [[0 1 2 3]\n     [4 5 6 7]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行后两列的值\")\nprint(arr_8[0,:2,-2:])\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行后两列的值\n    [[2 3]\n     [6 7]]\n    \n\n\n```python\nprint(arr_8)\nprint(\"获取到深度为0的前两行后两列的值并替换为-2\")\nprint(\"获取到深度为0的前两行后两列的值\")\nprint(arr_8[0,:2,-2:])\nprint(\"替换为-2\")\narr_8[0,:2,-2:] = -2\nprint(\"原来数组\")\nprint(arr_8)\n```\n\n    [[[ 0  1  2  3]\n      [ 4  5  6  7]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    获取到深度为0的前两行后两列的值并替换为-2\n    获取到深度为0的前两行后两列的值\n    [[2 3]\n     [6 7]]\n    替换为-2\n    原来数组\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n ## 四、numpy的合并功能\n     1. 在第一轴合并\n     2. 在第二轴合并\n     3. 在第三轴合并\n     4. 在任意轴合并\n\n\n```python\n# 1. 在第一轴合并\n# vstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.vstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]\n    \n     [[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n\n```python\n# 2. 在第二轴合并\n# hstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.hstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]\n      [ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]\n      [12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    \n\n\n```python\n# 3. 在第三轴合并\n# dstack\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\ntemp = np.dstack((temp_1, temp_2))\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2  0  1 -2 -2]\n      [ 4  5 -2 -2  4  5 -2 -2]\n      [ 8  9 10 11  8  9 10 11]]\n    \n     [[12 13 14 15 12 13 14 15]\n      [16 17 18 19 16 17 18 19]\n      [20 21 22 23 20 21 22 23]]]\n    \n\n\n```python\n# 4. 任意轴合并\n# concatenate\nprint(\"合并前的arr_8\\n\"+str(arr_8))\ntemp_1 = arr_8\ntemp_2 = arr_8\n# axis表示设置在何处轴合并，默认在第一轴\ntemp = np.concatenate((arr_8, arr_8), axis=2)\nprint(\"两个arr_8合并后\\n\"+str(temp))\n```\n\n    合并前的arr_8\n    [[[ 0  1 -2 -2]\n      [ 4  5 -2 -2]\n      [ 8  9 10 11]]\n    \n     [[12 13 14 15]\n      [16 17 18 19]\n      [20 21 22 23]]]\n    两个arr_8合并后\n    [[[ 0  1 -2 -2  0  1 -2 -2]\n      [ 4  5 -2 -2  4  5 -2 -2]\n      [ 8  9 10 11  8  9 10 11]]\n    \n     [[12 13 14 15 12 13 14 15]\n      [16 17 18 19 16 17 18 19]\n      [20 21 22 23 20 21 22 23]]]\n    \n","slug":"Python第三方库numpy的简单入门使用","published":1,"updated":"2020-06-07T07:09:15.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb4q7iel00005cbigcmm0ib7","content":"<p>首先，我们需要导入包文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、numpy中的一般语法\"><a href=\"#一、numpy中的一般语法\" class=\"headerlink\" title=\"一、numpy中的一般语法\"></a>一、numpy中的一般语法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 矩阵的逆、转置及秩</span></span><br><span class=\"line\">data_1 = np.matrix(<span class=\"string\">'3 4 5;7 8 9'</span>)</span><br><span class=\"line\">print(data_1)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的逆:\"</span>)</span><br><span class=\"line\">data_2 = data_1.I</span><br><span class=\"line\">print(data_2)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的转置:\"</span>)</span><br><span class=\"line\">data_3 = data_1.T</span><br><span class=\"line\">print(data_3)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的秩:\"</span>)</span><br><span class=\"line\">data_4 = np.linalg.matrix_rank(data_1)</span><br><span class=\"line\">print(data_4)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[3 4 5]\n [7 8 9]]\n矩阵的逆:\n[[-1.08333333  0.58333333]\n [-0.08333333  0.08333333]\n [ 0.91666667 -0.41666667]]\n矩阵的转置:\n[[3 7]\n [4 8]\n [5 9]]\n矩阵的秩:\n2</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 矩阵的维度（也称为轴数）</span></span><br><span class=\"line\">print(data_1.ndim)</span><br></pre></td></tr></table></figure>\n\n<pre><code>2</code></pre><h2 id=\"二、数组的创建\"><a href=\"#二、数组的创建\" class=\"headerlink\" title=\"二、数组的创建\"></a>二、数组的创建</h2><ol>\n<li>创建二维数组<br>  这里强调：使用matrix只能创建二维矩阵，而是用非matrix方法可以创建高维矩阵</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全0的矩阵</span></span><br><span class=\"line\">arr_1 = np.matrix(np.zeros((<span class=\"number\">3</span>, <span class=\"number\">3</span>)))</span><br><span class=\"line\">print(arr_1)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">arr_1 = np.zeros((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">print(arr_1)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全1的矩阵</span></span><br><span class=\"line\">arr_2 = np.matrix(np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>)))</span><br><span class=\"line\">print(arr_2)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">arr_2 = np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">print(arr_2)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建随机矩阵</span></span><br><span class=\"line\">arr_3 = np.matrix(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">arr_3</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[0.48890396, 0.09218043, 0.38339213, 0.61843015],\n        [0.35092127, 0.08485116, 0.84651857, 0.4481831 ],\n        [0.88727766, 0.56471182, 0.49473952, 0.69027512]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建整数随机矩阵</span></span><br><span class=\"line\">arr_4 = np.matrix(np.random.randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>, size=(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\">arr_4</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[7, 7, 7, 5],\n        [6, 5, 8, 5],\n        [5, 6, 7, 6]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建对角矩阵</span></span><br><span class=\"line\">new_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>, <span class=\"number\">7</span>)]</span><br><span class=\"line\">arr_5 = np.matrix(np.diag(new_list))</span><br><span class=\"line\">arr_5</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[3, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 5, 0],\n        [0, 0, 0, 6]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建单位矩阵</span></span><br><span class=\"line\">arr_6 = np.eye(<span class=\"number\">3</span>)</span><br><span class=\"line\">arr_6</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改变矩阵的形状</span></span><br><span class=\"line\">print(arr_4)</span><br><span class=\"line\">arr_7 = arr_4.reshape(<span class=\"number\">4</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">arr_7</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[7 7 7 5]\n [6 5 8 5]\n [5 6 7 6]]\n\n\n\n\n\nmatrix([[7, 7, 7],\n        [5, 6, 5],\n        [8, 5, 5],\n        [6, 7, 6]])</code></pre><ol start=\"2\">\n<li>高维数组</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如创建3维的数组</span></span><br><span class=\"line\">arr_8 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"数组维度：\"</span>+str(arr_8.ndim))</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n数组维度：3</code></pre><h2 id=\"三、numpy的索引和切片\"><a href=\"#三、numpy的索引和切片\" class=\"headerlink\" title=\"三、numpy的索引和切片\"></a>三、numpy的索引和切片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"单独获取到一个值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n单独获取到一个值\n3</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的所有值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:,:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的所有值\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行的值\n[[0 1 2 3]\n [4 5 6 7]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行后两列的值\n[[2 3]\n [6 7]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值并替换为-2\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:])</span><br><span class=\"line\">print(<span class=\"string\">\"替换为-2\"</span>)</span><br><span class=\"line\">arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:] = <span class=\"number\">-2</span></span><br><span class=\"line\">print(<span class=\"string\">\"原来数组\"</span>)</span><br><span class=\"line\">print(arr_8)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行后两列的值并替换为-2\n获取到深度为0的前两行后两列的值\n[[2 3]\n [6 7]]\n替换为-2\n原来数组\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><h2 id=\"四、numpy的合并功能\"><a href=\"#四、numpy的合并功能\" class=\"headerlink\" title=\"四、numpy的合并功能\"></a>四、numpy的合并功能</h2><pre><code>1. 在第一轴合并\n2. 在第二轴合并\n3. 在第三轴合并\n4. 在任意轴合并</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 在第一轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># vstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.vstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]\n\n [[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 在第二轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># hstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.hstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]\n  [ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]\n  [12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3. 在第三轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># dstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.dstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2  0  1 -2 -2]\n  [ 4  5 -2 -2  4  5 -2 -2]\n  [ 8  9 10 11  8  9 10 11]]\n\n [[12 13 14 15 12 13 14 15]\n  [16 17 18 19 16 17 18 19]\n  [20 21 22 23 20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4. 任意轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># concatenate</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\"><span class=\"comment\"># axis表示设置在何处轴合并，默认在第一轴</span></span><br><span class=\"line\">temp = np.concatenate((arr_8, arr_8), axis=<span class=\"number\">2</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2  0  1 -2 -2]\n  [ 4  5 -2 -2  4  5 -2 -2]\n  [ 8  9 10 11  8  9 10 11]]\n\n [[12 13 14 15 12 13 14 15]\n  [16 17 18 19 16 17 18 19]\n  [20 21 22 23 20 21 22 23]]]</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>首先，我们需要导入包文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、numpy中的一般语法\"><a href=\"#一、numpy中的一般语法\" class=\"headerlink\" title=\"一、numpy中的一般语法\"></a>一、numpy中的一般语法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 矩阵的逆、转置及秩</span></span><br><span class=\"line\">data_1 = np.matrix(<span class=\"string\">'3 4 5;7 8 9'</span>)</span><br><span class=\"line\">print(data_1)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的逆:\"</span>)</span><br><span class=\"line\">data_2 = data_1.I</span><br><span class=\"line\">print(data_2)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的转置:\"</span>)</span><br><span class=\"line\">data_3 = data_1.T</span><br><span class=\"line\">print(data_3)</span><br><span class=\"line\">print(<span class=\"string\">\"矩阵的秩:\"</span>)</span><br><span class=\"line\">data_4 = np.linalg.matrix_rank(data_1)</span><br><span class=\"line\">print(data_4)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[3 4 5]\n [7 8 9]]\n矩阵的逆:\n[[-1.08333333  0.58333333]\n [-0.08333333  0.08333333]\n [ 0.91666667 -0.41666667]]\n矩阵的转置:\n[[3 7]\n [4 8]\n [5 9]]\n矩阵的秩:\n2</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 矩阵的维度（也称为轴数）</span></span><br><span class=\"line\">print(data_1.ndim)</span><br></pre></td></tr></table></figure>\n\n<pre><code>2</code></pre><h2 id=\"二、数组的创建\"><a href=\"#二、数组的创建\" class=\"headerlink\" title=\"二、数组的创建\"></a>二、数组的创建</h2><ol>\n<li>创建二维数组<br>  这里强调：使用matrix只能创建二维矩阵，而是用非matrix方法可以创建高维矩阵</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全0的矩阵</span></span><br><span class=\"line\">arr_1 = np.matrix(np.zeros((<span class=\"number\">3</span>, <span class=\"number\">3</span>)))</span><br><span class=\"line\">print(arr_1)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">arr_1 = np.zeros((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">print(arr_1)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]\n[[0. 0. 0.]\n [0. 0. 0.]\n [0. 0. 0.]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全1的矩阵</span></span><br><span class=\"line\">arr_2 = np.matrix(np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>)))</span><br><span class=\"line\">print(arr_2)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">arr_2 = np.ones((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">print(arr_2)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]\n[[1. 1. 1.]\n [1. 1. 1.]\n [1. 1. 1.]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建随机矩阵</span></span><br><span class=\"line\">arr_3 = np.matrix(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">arr_3</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[0.48890396, 0.09218043, 0.38339213, 0.61843015],\n        [0.35092127, 0.08485116, 0.84651857, 0.4481831 ],\n        [0.88727766, 0.56471182, 0.49473952, 0.69027512]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建整数随机矩阵</span></span><br><span class=\"line\">arr_4 = np.matrix(np.random.randint(<span class=\"number\">5</span>, <span class=\"number\">10</span>, size=(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\">arr_4</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[7, 7, 7, 5],\n        [6, 5, 8, 5],\n        [5, 6, 7, 6]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建对角矩阵</span></span><br><span class=\"line\">new_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>, <span class=\"number\">7</span>)]</span><br><span class=\"line\">arr_5 = np.matrix(np.diag(new_list))</span><br><span class=\"line\">arr_5</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>matrix([[3, 0, 0, 0],\n        [0, 4, 0, 0],\n        [0, 0, 5, 0],\n        [0, 0, 0, 6]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建单位矩阵</span></span><br><span class=\"line\">arr_6 = np.eye(<span class=\"number\">3</span>)</span><br><span class=\"line\">arr_6</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>array([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改变矩阵的形状</span></span><br><span class=\"line\">print(arr_4)</span><br><span class=\"line\">arr_7 = arr_4.reshape(<span class=\"number\">4</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">arr_7</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[7 7 7 5]\n [6 5 8 5]\n [5 6 7 6]]\n\n\n\n\n\nmatrix([[7, 7, 7],\n        [5, 6, 5],\n        [8, 5, 5],\n        [6, 7, 6]])</code></pre><ol start=\"2\">\n<li>高维数组</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如创建3维的数组</span></span><br><span class=\"line\">arr_8 = np.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"数组维度：\"</span>+str(arr_8.ndim))</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n数组维度：3</code></pre><h2 id=\"三、numpy的索引和切片\"><a href=\"#三、numpy的索引和切片\" class=\"headerlink\" title=\"三、numpy的索引和切片\"></a>三、numpy的索引和切片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"单独获取到一个值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n单独获取到一个值\n3</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的所有值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:,:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的所有值\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行的值\n[[0 1 2 3]\n [4 5 6 7]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:])</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行后两列的值\n[[2 3]\n [6 7]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(arr_8)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值并替换为-2\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"获取到深度为0的前两行后两列的值\"</span>)</span><br><span class=\"line\">print(arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:])</span><br><span class=\"line\">print(<span class=\"string\">\"替换为-2\"</span>)</span><br><span class=\"line\">arr_8[<span class=\"number\">0</span>,:<span class=\"number\">2</span>,<span class=\"number\">-2</span>:] = <span class=\"number\">-2</span></span><br><span class=\"line\">print(<span class=\"string\">\"原来数组\"</span>)</span><br><span class=\"line\">print(arr_8)</span><br></pre></td></tr></table></figure>\n\n<pre><code>[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n获取到深度为0的前两行后两列的值并替换为-2\n获取到深度为0的前两行后两列的值\n[[2 3]\n [6 7]]\n替换为-2\n原来数组\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><h2 id=\"四、numpy的合并功能\"><a href=\"#四、numpy的合并功能\" class=\"headerlink\" title=\"四、numpy的合并功能\"></a>四、numpy的合并功能</h2><pre><code>1. 在第一轴合并\n2. 在第二轴合并\n3. 在第三轴合并\n4. 在任意轴合并</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 在第一轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># vstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.vstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]\n\n [[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2. 在第二轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># hstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.hstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]\n  [ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]\n  [12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3. 在第三轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># dstack</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\">temp = np.dstack((temp_1, temp_2))</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2  0  1 -2 -2]\n  [ 4  5 -2 -2  4  5 -2 -2]\n  [ 8  9 10 11  8  9 10 11]]\n\n [[12 13 14 15 12 13 14 15]\n  [16 17 18 19 16 17 18 19]\n  [20 21 22 23 20 21 22 23]]]</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4. 任意轴合并</span></span><br><span class=\"line\"><span class=\"comment\"># concatenate</span></span><br><span class=\"line\">print(<span class=\"string\">\"合并前的arr_8\\n\"</span>+str(arr_8))</span><br><span class=\"line\">temp_1 = arr_8</span><br><span class=\"line\">temp_2 = arr_8</span><br><span class=\"line\"><span class=\"comment\"># axis表示设置在何处轴合并，默认在第一轴</span></span><br><span class=\"line\">temp = np.concatenate((arr_8, arr_8), axis=<span class=\"number\">2</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"两个arr_8合并后\\n\"</span>+str(temp))</span><br></pre></td></tr></table></figure>\n\n<pre><code>合并前的arr_8\n[[[ 0  1 -2 -2]\n  [ 4  5 -2 -2]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n两个arr_8合并后\n[[[ 0  1 -2 -2  0  1 -2 -2]\n  [ 4  5 -2 -2  4  5 -2 -2]\n  [ 8  9 10 11  8  9 10 11]]\n\n [[12 13 14 15 12 13 14 15]\n  [16 17 18 19 16 17 18 19]\n  [20 21 22 23 20 21 22 23]]]</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}